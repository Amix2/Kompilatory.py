Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> START
Rule 1     START -> { START }
Rule 2     START -> START START
Rule 3     START -> ASSIGN_EXP ;
Rule 4     START -> IF_INSTR
Rule 5     START -> WHILE_INSTR
Rule 6     START -> FOR_INSTR
Rule 7     START -> PRINT_FUN
Rule 8     START -> RETURN_FUN
Rule 9     START -> BREAK ;
Rule 10    START -> CONTINUE ;
Rule 11    empty -> <empty>
Rule 12    VALUE_SINGLE -> INTNUM
Rule 13    VALUE_SINGLE -> FLOATNUM
Rule 14    VALUE_SINGLE -> ID '
Rule 15    VALUE_SINGLE -> ID
Rule 16    VALUE_SINGLE -> STRING
Rule 17    LIST_VALUE_SINGLE -> VALUE_SINGLE
Rule 18    LIST_VALUE_SINGLE -> VALUE_SINGLE , LIST_VALUE_SINGLE
Rule 19    MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST
Rule 20    MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ]
Rule 21    MATRIX -> [ MATRIX_ROW_LIST ]
Rule 22    MATRIX -> [ LIST_VALUE_SINGLE ]
Rule 23    MATRIX -> MATRIX '
Rule 24    VALUE -> VALUE_SINGLE
Rule 25    VALUE -> MATRIX
Rule 26    LIST_VALUE -> VALUE
Rule 27    LIST_VALUE -> VALUE , LIST_VALUE
Rule 28    ARITHMETIC_OP -> +
Rule 29    ARITHMETIC_OP -> -
Rule 30    ARITHMETIC_OP -> *
Rule 31    ARITHMETIC_OP -> /
Rule 32    ARITHMETIC_OP -> DOTADD
Rule 33    ARITHMETIC_OP -> DOTSUB
Rule 34    ARITHMETIC_OP -> DOTMUL
Rule 35    ARITHMETIC_OP -> DOTDIV
Rule 36    ASSIGN_OP -> ADDASSIGN
Rule 37    ASSIGN_OP -> SUBASSIGN
Rule 38    ASSIGN_OP -> MULASSIGN
Rule 39    ASSIGN_OP -> DIVASSIGN
Rule 40    ASSIGN_OP -> =
Rule 41    RELATION_OP -> LT
Rule 42    RELATION_OP -> GT
Rule 43    RELATION_OP -> LE
Rule 44    RELATION_OP -> GE
Rule 45    RELATION_OP -> NE
Rule 46    RELATION_OP -> EQ
Rule 47    ARTHMETIC_EXP -> VALUE
Rule 48    ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP
Rule 49    ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
Rule 50    ARTHMETIC_EXP -> ( ARTHMETIC_EXP )
Rule 51    ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP )
Rule 52    ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP )
Rule 53    ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP )
Rule 54    ARITHMETIC_OP_UNAR -> +
Rule 55    ARITHMETIC_OP_UNAR -> -
Rule 56    ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
Rule 57    RELATION_EXP -> ARTHMETIC_EXP RELATION_OP ARTHMETIC_EXP
Rule 58    RELATION_EXP -> ( RELATION_EXP )
Rule 59    ASSIGN_EXP -> ID ASSIGN_OP ARTHMETIC_EXP
Rule 60    ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
Rule 61    IF_INSTR -> IF ( RELATION_EXP ) START
Rule 62    IF_INSTR -> IF ( RELATION_EXP ) START ELSE START
Rule 63    WHILE_INSTR -> WHILE ( RELATION_EXP ) START
Rule 64    FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
Rule 65    PRINT_FUN -> PRINT LIST_VALUE ;
Rule 66    RETURN_FUN -> RETURN LIST_VALUE ;

Terminals, with rules where they appear

'                    : 14 23
(                    : 50 51 52 53 58 61 62 63
)                    : 50 51 52 53 58 61 62 63
*                    : 30
+                    : 28 54
,                    : 18 19 20 27
-                    : 29 55
/                    : 31
:                    : 64
;                    : 3 9 10 65 66
=                    : 40 64
ADDASSIGN            : 36
BREAK                : 9
COMMENT              : 
CONTINUE             : 10
DIVASSIGN            : 39
DOTADD               : 32
DOTDIV               : 35
DOTMUL               : 34
DOTSUB               : 33
ELSE                 : 62
EQ                   : 46
EYE                  : 51
FLOATNUM             : 13
FOR                  : 64
GE                   : 44
GT                   : 42
ID                   : 14 15 59 60 64
IF                   : 61 62
INTNUM               : 12
LE                   : 43
LT                   : 41
MULASSIGN            : 38
NE                   : 45
ONES                 : 53
PRINT                : 65
RETURN               : 66
STRING               : 16
SUBASSIGN            : 37
WHILE                : 63
ZEROS                : 52
[                    : 19 20 20 21 22 60
]                    : 19 20 20 21 22 60
error                : 
{                    : 1
}                    : 1

Nonterminals, with rules where they appear

ARITHMETIC_OP        : 49
ARITHMETIC_OP_UNAR   : 48 56 56
ARTHMETIC_EXP        : 48 49 49 50 51 52 53 57 57 59 60 64 64
ASSIGN_EXP           : 3
ASSIGN_OP            : 59 60
FOR_INSTR            : 6
IF_INSTR             : 4
LIST_VALUE           : 27 60 65 66
LIST_VALUE_SINGLE    : 18 19 20 20 22
MATRIX               : 23 25
MATRIX_ROW_LIST      : 19 21
PRINT_FUN            : 7
RELATION_EXP         : 58 61 62 63
RELATION_OP          : 57
RETURN_FUN           : 8
START                : 1 2 2 61 62 62 63 64 0
VALUE                : 26 27 47
VALUE_SINGLE         : 17 18 24
WHILE_INSTR          : 5
empty                : 

Parsing method: LALR

state 0

    (0) S' -> . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 1
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 1

    (0) S' -> START .
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 2

    (1) START -> { . START }
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 18
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 3

    (3) START -> ASSIGN_EXP . ;

    ;               shift and go to state 19


state 4

    (4) START -> IF_INSTR .

    {               reduce using rule 4 (START -> IF_INSTR .)
    BREAK           reduce using rule 4 (START -> IF_INSTR .)
    CONTINUE        reduce using rule 4 (START -> IF_INSTR .)
    ID              reduce using rule 4 (START -> IF_INSTR .)
    IF              reduce using rule 4 (START -> IF_INSTR .)
    WHILE           reduce using rule 4 (START -> IF_INSTR .)
    FOR             reduce using rule 4 (START -> IF_INSTR .)
    PRINT           reduce using rule 4 (START -> IF_INSTR .)
    RETURN          reduce using rule 4 (START -> IF_INSTR .)
    $end            reduce using rule 4 (START -> IF_INSTR .)
    }               reduce using rule 4 (START -> IF_INSTR .)
    ELSE            reduce using rule 4 (START -> IF_INSTR .)


state 5

    (5) START -> WHILE_INSTR .

    {               reduce using rule 5 (START -> WHILE_INSTR .)
    BREAK           reduce using rule 5 (START -> WHILE_INSTR .)
    CONTINUE        reduce using rule 5 (START -> WHILE_INSTR .)
    ID              reduce using rule 5 (START -> WHILE_INSTR .)
    IF              reduce using rule 5 (START -> WHILE_INSTR .)
    WHILE           reduce using rule 5 (START -> WHILE_INSTR .)
    FOR             reduce using rule 5 (START -> WHILE_INSTR .)
    PRINT           reduce using rule 5 (START -> WHILE_INSTR .)
    RETURN          reduce using rule 5 (START -> WHILE_INSTR .)
    $end            reduce using rule 5 (START -> WHILE_INSTR .)
    }               reduce using rule 5 (START -> WHILE_INSTR .)
    ELSE            reduce using rule 5 (START -> WHILE_INSTR .)


state 6

    (6) START -> FOR_INSTR .

    {               reduce using rule 6 (START -> FOR_INSTR .)
    BREAK           reduce using rule 6 (START -> FOR_INSTR .)
    CONTINUE        reduce using rule 6 (START -> FOR_INSTR .)
    ID              reduce using rule 6 (START -> FOR_INSTR .)
    IF              reduce using rule 6 (START -> FOR_INSTR .)
    WHILE           reduce using rule 6 (START -> FOR_INSTR .)
    FOR             reduce using rule 6 (START -> FOR_INSTR .)
    PRINT           reduce using rule 6 (START -> FOR_INSTR .)
    RETURN          reduce using rule 6 (START -> FOR_INSTR .)
    $end            reduce using rule 6 (START -> FOR_INSTR .)
    }               reduce using rule 6 (START -> FOR_INSTR .)
    ELSE            reduce using rule 6 (START -> FOR_INSTR .)


state 7

    (7) START -> PRINT_FUN .

    {               reduce using rule 7 (START -> PRINT_FUN .)
    BREAK           reduce using rule 7 (START -> PRINT_FUN .)
    CONTINUE        reduce using rule 7 (START -> PRINT_FUN .)
    ID              reduce using rule 7 (START -> PRINT_FUN .)
    IF              reduce using rule 7 (START -> PRINT_FUN .)
    WHILE           reduce using rule 7 (START -> PRINT_FUN .)
    FOR             reduce using rule 7 (START -> PRINT_FUN .)
    PRINT           reduce using rule 7 (START -> PRINT_FUN .)
    RETURN          reduce using rule 7 (START -> PRINT_FUN .)
    $end            reduce using rule 7 (START -> PRINT_FUN .)
    }               reduce using rule 7 (START -> PRINT_FUN .)
    ELSE            reduce using rule 7 (START -> PRINT_FUN .)


state 8

    (8) START -> RETURN_FUN .

    {               reduce using rule 8 (START -> RETURN_FUN .)
    BREAK           reduce using rule 8 (START -> RETURN_FUN .)
    CONTINUE        reduce using rule 8 (START -> RETURN_FUN .)
    ID              reduce using rule 8 (START -> RETURN_FUN .)
    IF              reduce using rule 8 (START -> RETURN_FUN .)
    WHILE           reduce using rule 8 (START -> RETURN_FUN .)
    FOR             reduce using rule 8 (START -> RETURN_FUN .)
    PRINT           reduce using rule 8 (START -> RETURN_FUN .)
    RETURN          reduce using rule 8 (START -> RETURN_FUN .)
    $end            reduce using rule 8 (START -> RETURN_FUN .)
    }               reduce using rule 8 (START -> RETURN_FUN .)
    ELSE            reduce using rule 8 (START -> RETURN_FUN .)


state 9

    (9) START -> BREAK . ;

    ;               shift and go to state 20


state 10

    (10) START -> CONTINUE . ;

    ;               shift and go to state 21


state 11

    (59) ASSIGN_EXP -> ID . ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> ID . [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (36) ASSIGN_OP -> . ADDASSIGN
    (37) ASSIGN_OP -> . SUBASSIGN
    (38) ASSIGN_OP -> . MULASSIGN
    (39) ASSIGN_OP -> . DIVASSIGN
    (40) ASSIGN_OP -> . =

    [               shift and go to state 23
    ADDASSIGN       shift and go to state 24
    SUBASSIGN       shift and go to state 25
    MULASSIGN       shift and go to state 26
    DIVASSIGN       shift and go to state 27
    =               shift and go to state 28

    ASSIGN_OP                      shift and go to state 22

state 12

    (61) IF_INSTR -> IF . ( RELATION_EXP ) START
    (62) IF_INSTR -> IF . ( RELATION_EXP ) START ELSE START

    (               shift and go to state 29


state 13

    (63) WHILE_INSTR -> WHILE . ( RELATION_EXP ) START

    (               shift and go to state 30


state 14

    (64) FOR_INSTR -> FOR . ID = ARTHMETIC_EXP : ARTHMETIC_EXP START

    ID              shift and go to state 31


state 15

    (65) PRINT_FUN -> PRINT . LIST_VALUE ;
    (26) LIST_VALUE -> . VALUE
    (27) LIST_VALUE -> . VALUE , LIST_VALUE
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    LIST_VALUE                     shift and go to state 32
    VALUE                          shift and go to state 33
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 16

    (66) RETURN_FUN -> RETURN . LIST_VALUE ;
    (26) LIST_VALUE -> . VALUE
    (27) LIST_VALUE -> . VALUE , LIST_VALUE
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    LIST_VALUE                     shift and go to state 41
    VALUE                          shift and go to state 33
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 17

    (2) START -> START START .
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 2 (START -> START START .)
    }               reduce using rule 2 (START -> START START .)
    ELSE            reduce using rule 2 (START -> START START .)
    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

  ! {               [ reduce using rule 2 (START -> START START .) ]
  ! BREAK           [ reduce using rule 2 (START -> START START .) ]
  ! CONTINUE        [ reduce using rule 2 (START -> START START .) ]
  ! ID              [ reduce using rule 2 (START -> START START .) ]
  ! IF              [ reduce using rule 2 (START -> START START .) ]
  ! WHILE           [ reduce using rule 2 (START -> START START .) ]
  ! FOR             [ reduce using rule 2 (START -> START START .) ]
  ! PRINT           [ reduce using rule 2 (START -> START START .) ]
  ! RETURN          [ reduce using rule 2 (START -> START START .) ]

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 18

    (1) START -> { START . }
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    }               shift and go to state 42
    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 19

    (3) START -> ASSIGN_EXP ; .

    {               reduce using rule 3 (START -> ASSIGN_EXP ; .)
    BREAK           reduce using rule 3 (START -> ASSIGN_EXP ; .)
    CONTINUE        reduce using rule 3 (START -> ASSIGN_EXP ; .)
    ID              reduce using rule 3 (START -> ASSIGN_EXP ; .)
    IF              reduce using rule 3 (START -> ASSIGN_EXP ; .)
    WHILE           reduce using rule 3 (START -> ASSIGN_EXP ; .)
    FOR             reduce using rule 3 (START -> ASSIGN_EXP ; .)
    PRINT           reduce using rule 3 (START -> ASSIGN_EXP ; .)
    RETURN          reduce using rule 3 (START -> ASSIGN_EXP ; .)
    $end            reduce using rule 3 (START -> ASSIGN_EXP ; .)
    }               reduce using rule 3 (START -> ASSIGN_EXP ; .)
    ELSE            reduce using rule 3 (START -> ASSIGN_EXP ; .)


state 20

    (9) START -> BREAK ; .

    {               reduce using rule 9 (START -> BREAK ; .)
    BREAK           reduce using rule 9 (START -> BREAK ; .)
    CONTINUE        reduce using rule 9 (START -> BREAK ; .)
    ID              reduce using rule 9 (START -> BREAK ; .)
    IF              reduce using rule 9 (START -> BREAK ; .)
    WHILE           reduce using rule 9 (START -> BREAK ; .)
    FOR             reduce using rule 9 (START -> BREAK ; .)
    PRINT           reduce using rule 9 (START -> BREAK ; .)
    RETURN          reduce using rule 9 (START -> BREAK ; .)
    $end            reduce using rule 9 (START -> BREAK ; .)
    }               reduce using rule 9 (START -> BREAK ; .)
    ELSE            reduce using rule 9 (START -> BREAK ; .)


state 21

    (10) START -> CONTINUE ; .

    {               reduce using rule 10 (START -> CONTINUE ; .)
    BREAK           reduce using rule 10 (START -> CONTINUE ; .)
    CONTINUE        reduce using rule 10 (START -> CONTINUE ; .)
    ID              reduce using rule 10 (START -> CONTINUE ; .)
    IF              reduce using rule 10 (START -> CONTINUE ; .)
    WHILE           reduce using rule 10 (START -> CONTINUE ; .)
    FOR             reduce using rule 10 (START -> CONTINUE ; .)
    PRINT           reduce using rule 10 (START -> CONTINUE ; .)
    RETURN          reduce using rule 10 (START -> CONTINUE ; .)
    $end            reduce using rule 10 (START -> CONTINUE ; .)
    }               reduce using rule 10 (START -> CONTINUE ; .)
    ELSE            reduce using rule 10 (START -> CONTINUE ; .)


state 22

    (59) ASSIGN_EXP -> ID ASSIGN_OP . ARTHMETIC_EXP
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 43
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 23

    (60) ASSIGN_EXP -> ID [ . LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (26) LIST_VALUE -> . VALUE
    (27) LIST_VALUE -> . VALUE , LIST_VALUE
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    LIST_VALUE                     shift and go to state 52
    VALUE                          shift and go to state 33
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 24

    (36) ASSIGN_OP -> ADDASSIGN .

    (               reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    EYE             reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    ZEROS           reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    ONES            reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    +               reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    -               reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    INTNUM          reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    FLOATNUM        reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    ID              reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    STRING          reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)
    [               reduce using rule 36 (ASSIGN_OP -> ADDASSIGN .)


state 25

    (37) ASSIGN_OP -> SUBASSIGN .

    (               reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    EYE             reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    ZEROS           reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    ONES            reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    +               reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    -               reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    INTNUM          reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    FLOATNUM        reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    ID              reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    STRING          reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)
    [               reduce using rule 37 (ASSIGN_OP -> SUBASSIGN .)


state 26

    (38) ASSIGN_OP -> MULASSIGN .

    (               reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    EYE             reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    ZEROS           reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    ONES            reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    +               reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    -               reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    INTNUM          reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    FLOATNUM        reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    ID              reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    STRING          reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)
    [               reduce using rule 38 (ASSIGN_OP -> MULASSIGN .)


state 27

    (39) ASSIGN_OP -> DIVASSIGN .

    (               reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    EYE             reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    ZEROS           reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    ONES            reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    +               reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    -               reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    INTNUM          reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    FLOATNUM        reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    ID              reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    STRING          reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)
    [               reduce using rule 39 (ASSIGN_OP -> DIVASSIGN .)


state 28

    (40) ASSIGN_OP -> = .

    (               reduce using rule 40 (ASSIGN_OP -> = .)
    EYE             reduce using rule 40 (ASSIGN_OP -> = .)
    ZEROS           reduce using rule 40 (ASSIGN_OP -> = .)
    ONES            reduce using rule 40 (ASSIGN_OP -> = .)
    +               reduce using rule 40 (ASSIGN_OP -> = .)
    -               reduce using rule 40 (ASSIGN_OP -> = .)
    INTNUM          reduce using rule 40 (ASSIGN_OP -> = .)
    FLOATNUM        reduce using rule 40 (ASSIGN_OP -> = .)
    ID              reduce using rule 40 (ASSIGN_OP -> = .)
    STRING          reduce using rule 40 (ASSIGN_OP -> = .)
    [               reduce using rule 40 (ASSIGN_OP -> = .)


state 29

    (61) IF_INSTR -> IF ( . RELATION_EXP ) START
    (62) IF_INSTR -> IF ( . RELATION_EXP ) START ELSE START
    (57) RELATION_EXP -> . ARTHMETIC_EXP RELATION_OP ARTHMETIC_EXP
    (58) RELATION_EXP -> . ( RELATION_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 53
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    RELATION_EXP                   shift and go to state 54
    ARTHMETIC_EXP                  shift and go to state 55
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 30

    (63) WHILE_INSTR -> WHILE ( . RELATION_EXP ) START
    (57) RELATION_EXP -> . ARTHMETIC_EXP RELATION_OP ARTHMETIC_EXP
    (58) RELATION_EXP -> . ( RELATION_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 53
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    RELATION_EXP                   shift and go to state 56
    ARTHMETIC_EXP                  shift and go to state 55
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 31

    (64) FOR_INSTR -> FOR ID . = ARTHMETIC_EXP : ARTHMETIC_EXP START

    =               shift and go to state 57


state 32

    (65) PRINT_FUN -> PRINT LIST_VALUE . ;

    ;               shift and go to state 58


state 33

    (26) LIST_VALUE -> VALUE .
    (27) LIST_VALUE -> VALUE . , LIST_VALUE

    ;               reduce using rule 26 (LIST_VALUE -> VALUE .)
    ]               reduce using rule 26 (LIST_VALUE -> VALUE .)
    ,               shift and go to state 59


state 34

    (24) VALUE -> VALUE_SINGLE .

    ,               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    ;               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    +               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    -               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    *               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    /               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    DOTADD          reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    DOTSUB          reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    DOTMUL          reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    DOTDIV          reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    ]               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    LT              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    GT              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    LE              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    GE              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    NE              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    EQ              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    )               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    :               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    {               reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    BREAK           reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    CONTINUE        reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    ID              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    IF              reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    WHILE           reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    FOR             reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    PRINT           reduce using rule 24 (VALUE -> VALUE_SINGLE .)
    RETURN          reduce using rule 24 (VALUE -> VALUE_SINGLE .)


state 35

    (25) VALUE -> MATRIX .
    (23) MATRIX -> MATRIX . '

    ,               reduce using rule 25 (VALUE -> MATRIX .)
    ;               reduce using rule 25 (VALUE -> MATRIX .)
    +               reduce using rule 25 (VALUE -> MATRIX .)
    -               reduce using rule 25 (VALUE -> MATRIX .)
    *               reduce using rule 25 (VALUE -> MATRIX .)
    /               reduce using rule 25 (VALUE -> MATRIX .)
    DOTADD          reduce using rule 25 (VALUE -> MATRIX .)
    DOTSUB          reduce using rule 25 (VALUE -> MATRIX .)
    DOTMUL          reduce using rule 25 (VALUE -> MATRIX .)
    DOTDIV          reduce using rule 25 (VALUE -> MATRIX .)
    ]               reduce using rule 25 (VALUE -> MATRIX .)
    LT              reduce using rule 25 (VALUE -> MATRIX .)
    GT              reduce using rule 25 (VALUE -> MATRIX .)
    LE              reduce using rule 25 (VALUE -> MATRIX .)
    GE              reduce using rule 25 (VALUE -> MATRIX .)
    NE              reduce using rule 25 (VALUE -> MATRIX .)
    EQ              reduce using rule 25 (VALUE -> MATRIX .)
    )               reduce using rule 25 (VALUE -> MATRIX .)
    :               reduce using rule 25 (VALUE -> MATRIX .)
    {               reduce using rule 25 (VALUE -> MATRIX .)
    BREAK           reduce using rule 25 (VALUE -> MATRIX .)
    CONTINUE        reduce using rule 25 (VALUE -> MATRIX .)
    ID              reduce using rule 25 (VALUE -> MATRIX .)
    IF              reduce using rule 25 (VALUE -> MATRIX .)
    WHILE           reduce using rule 25 (VALUE -> MATRIX .)
    FOR             reduce using rule 25 (VALUE -> MATRIX .)
    PRINT           reduce using rule 25 (VALUE -> MATRIX .)
    RETURN          reduce using rule 25 (VALUE -> MATRIX .)
    '               shift and go to state 60


state 36

    (12) VALUE_SINGLE -> INTNUM .

    ,               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    ;               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    +               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    -               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    *               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    /               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    DOTADD          reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    DOTSUB          reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    DOTMUL          reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    DOTDIV          reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    ]               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    LT              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    GT              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    LE              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    GE              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    NE              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    EQ              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    )               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    :               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    {               reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    BREAK           reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    CONTINUE        reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    ID              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    IF              reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    WHILE           reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    FOR             reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    PRINT           reduce using rule 12 (VALUE_SINGLE -> INTNUM .)
    RETURN          reduce using rule 12 (VALUE_SINGLE -> INTNUM .)


state 37

    (13) VALUE_SINGLE -> FLOATNUM .

    ,               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    ;               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    +               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    -               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    *               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    /               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    DOTADD          reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    DOTSUB          reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    DOTMUL          reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    DOTDIV          reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    ]               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    LT              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    GT              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    LE              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    GE              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    NE              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    EQ              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    )               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    :               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    {               reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    BREAK           reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    CONTINUE        reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    ID              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    IF              reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    WHILE           reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    FOR             reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    PRINT           reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)
    RETURN          reduce using rule 13 (VALUE_SINGLE -> FLOATNUM .)


state 38

    (14) VALUE_SINGLE -> ID . '
    (15) VALUE_SINGLE -> ID .

    '               shift and go to state 61
    ,               reduce using rule 15 (VALUE_SINGLE -> ID .)
    ;               reduce using rule 15 (VALUE_SINGLE -> ID .)
    +               reduce using rule 15 (VALUE_SINGLE -> ID .)
    -               reduce using rule 15 (VALUE_SINGLE -> ID .)
    *               reduce using rule 15 (VALUE_SINGLE -> ID .)
    /               reduce using rule 15 (VALUE_SINGLE -> ID .)
    DOTADD          reduce using rule 15 (VALUE_SINGLE -> ID .)
    DOTSUB          reduce using rule 15 (VALUE_SINGLE -> ID .)
    DOTMUL          reduce using rule 15 (VALUE_SINGLE -> ID .)
    DOTDIV          reduce using rule 15 (VALUE_SINGLE -> ID .)
    ]               reduce using rule 15 (VALUE_SINGLE -> ID .)
    LT              reduce using rule 15 (VALUE_SINGLE -> ID .)
    GT              reduce using rule 15 (VALUE_SINGLE -> ID .)
    LE              reduce using rule 15 (VALUE_SINGLE -> ID .)
    GE              reduce using rule 15 (VALUE_SINGLE -> ID .)
    NE              reduce using rule 15 (VALUE_SINGLE -> ID .)
    EQ              reduce using rule 15 (VALUE_SINGLE -> ID .)
    )               reduce using rule 15 (VALUE_SINGLE -> ID .)
    :               reduce using rule 15 (VALUE_SINGLE -> ID .)
    {               reduce using rule 15 (VALUE_SINGLE -> ID .)
    BREAK           reduce using rule 15 (VALUE_SINGLE -> ID .)
    CONTINUE        reduce using rule 15 (VALUE_SINGLE -> ID .)
    ID              reduce using rule 15 (VALUE_SINGLE -> ID .)
    IF              reduce using rule 15 (VALUE_SINGLE -> ID .)
    WHILE           reduce using rule 15 (VALUE_SINGLE -> ID .)
    FOR             reduce using rule 15 (VALUE_SINGLE -> ID .)
    PRINT           reduce using rule 15 (VALUE_SINGLE -> ID .)
    RETURN          reduce using rule 15 (VALUE_SINGLE -> ID .)


state 39

    (16) VALUE_SINGLE -> STRING .

    ,               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    ;               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    +               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    -               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    *               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    /               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    DOTADD          reduce using rule 16 (VALUE_SINGLE -> STRING .)
    DOTSUB          reduce using rule 16 (VALUE_SINGLE -> STRING .)
    DOTMUL          reduce using rule 16 (VALUE_SINGLE -> STRING .)
    DOTDIV          reduce using rule 16 (VALUE_SINGLE -> STRING .)
    ]               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    LT              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    GT              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    LE              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    GE              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    NE              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    EQ              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    )               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    :               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    {               reduce using rule 16 (VALUE_SINGLE -> STRING .)
    BREAK           reduce using rule 16 (VALUE_SINGLE -> STRING .)
    CONTINUE        reduce using rule 16 (VALUE_SINGLE -> STRING .)
    ID              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    IF              reduce using rule 16 (VALUE_SINGLE -> STRING .)
    WHILE           reduce using rule 16 (VALUE_SINGLE -> STRING .)
    FOR             reduce using rule 16 (VALUE_SINGLE -> STRING .)
    PRINT           reduce using rule 16 (VALUE_SINGLE -> STRING .)
    RETURN          reduce using rule 16 (VALUE_SINGLE -> STRING .)


state 40

    (21) MATRIX -> [ . MATRIX_ROW_LIST ]
    (22) MATRIX -> [ . LIST_VALUE_SINGLE ]
    (19) MATRIX_ROW_LIST -> . [ LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> . [ LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ]
    (17) LIST_VALUE_SINGLE -> . VALUE_SINGLE
    (18) LIST_VALUE_SINGLE -> . VALUE_SINGLE , LIST_VALUE_SINGLE
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING

    [               shift and go to state 62
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39

    MATRIX_ROW_LIST                shift and go to state 63
    LIST_VALUE_SINGLE              shift and go to state 64
    VALUE_SINGLE                   shift and go to state 65

state 41

    (66) RETURN_FUN -> RETURN LIST_VALUE . ;

    ;               shift and go to state 66


state 42

    (1) START -> { START } .

    {               reduce using rule 1 (START -> { START } .)
    BREAK           reduce using rule 1 (START -> { START } .)
    CONTINUE        reduce using rule 1 (START -> { START } .)
    ID              reduce using rule 1 (START -> { START } .)
    IF              reduce using rule 1 (START -> { START } .)
    WHILE           reduce using rule 1 (START -> { START } .)
    FOR             reduce using rule 1 (START -> { START } .)
    PRINT           reduce using rule 1 (START -> { START } .)
    RETURN          reduce using rule 1 (START -> { START } .)
    $end            reduce using rule 1 (START -> { START } .)
    }               reduce using rule 1 (START -> { START } .)
    ELSE            reduce using rule 1 (START -> { START } .)


state 43

    (59) ASSIGN_EXP -> ID ASSIGN_OP ARTHMETIC_EXP .
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    ;               reduce using rule 59 (ASSIGN_EXP -> ID ASSIGN_OP ARTHMETIC_EXP .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 44

    (47) ARTHMETIC_EXP -> VALUE .

    +               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    -               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    *               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    /               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    DOTADD          reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    DOTSUB          reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    DOTMUL          reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    DOTDIV          reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    ;               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    LT              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    GT              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    LE              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    GE              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    NE              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    EQ              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    )               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    :               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    {               reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    BREAK           reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    CONTINUE        reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    ID              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    IF              reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    WHILE           reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    FOR             reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    PRINT           reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)
    RETURN          reduce using rule 47 (ARTHMETIC_EXP -> VALUE .)


state 45

    (48) ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR . ARTHMETIC_EXP
    (56) ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR . ARITHMETIC_OP_UNAR
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARITHMETIC_OP_UNAR             shift and go to state 76
    ARTHMETIC_EXP                  shift and go to state 77
    VALUE                          shift and go to state 44
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 46

    (50) ARTHMETIC_EXP -> ( . ARTHMETIC_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 78
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 47

    (51) ARTHMETIC_EXP -> EYE . ( ARTHMETIC_EXP )

    (               shift and go to state 79


state 48

    (52) ARTHMETIC_EXP -> ZEROS . ( ARTHMETIC_EXP )

    (               shift and go to state 80


state 49

    (53) ARTHMETIC_EXP -> ONES . ( ARTHMETIC_EXP )

    (               shift and go to state 81


state 50

    (54) ARITHMETIC_OP_UNAR -> + .

    (               reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    EYE             reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    ZEROS           reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    ONES            reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    +               reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    -               reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    INTNUM          reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    FLOATNUM        reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    ID              reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    STRING          reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)
    [               reduce using rule 54 (ARITHMETIC_OP_UNAR -> + .)


state 51

    (55) ARITHMETIC_OP_UNAR -> - .

    (               reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    EYE             reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    ZEROS           reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    ONES            reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    +               reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    -               reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    INTNUM          reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    FLOATNUM        reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    ID              reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    STRING          reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)
    [               reduce using rule 55 (ARITHMETIC_OP_UNAR -> - .)


state 52

    (60) ASSIGN_EXP -> ID [ LIST_VALUE . ] ASSIGN_OP ARTHMETIC_EXP

    ]               shift and go to state 82


state 53

    (58) RELATION_EXP -> ( . RELATION_EXP )
    (50) ARTHMETIC_EXP -> ( . ARTHMETIC_EXP )
    (57) RELATION_EXP -> . ARTHMETIC_EXP RELATION_OP ARTHMETIC_EXP
    (58) RELATION_EXP -> . ( RELATION_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 53
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    RELATION_EXP                   shift and go to state 83
    ARTHMETIC_EXP                  shift and go to state 84
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 54

    (61) IF_INSTR -> IF ( RELATION_EXP . ) START
    (62) IF_INSTR -> IF ( RELATION_EXP . ) START ELSE START

    )               shift and go to state 85


state 55

    (57) RELATION_EXP -> ARTHMETIC_EXP . RELATION_OP ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (41) RELATION_OP -> . LT
    (42) RELATION_OP -> . GT
    (43) RELATION_OP -> . LE
    (44) RELATION_OP -> . GE
    (45) RELATION_OP -> . NE
    (46) RELATION_OP -> . EQ
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    LT              shift and go to state 87
    GT              shift and go to state 88
    LE              shift and go to state 89
    GE              shift and go to state 90
    NE              shift and go to state 91
    EQ              shift and go to state 92
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    RELATION_OP                    shift and go to state 86
    ARITHMETIC_OP                  shift and go to state 67

state 56

    (63) WHILE_INSTR -> WHILE ( RELATION_EXP . ) START

    )               shift and go to state 93


state 57

    (64) FOR_INSTR -> FOR ID = . ARTHMETIC_EXP : ARTHMETIC_EXP START
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 94
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 58

    (65) PRINT_FUN -> PRINT LIST_VALUE ; .

    {               reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    BREAK           reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    CONTINUE        reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    ID              reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    IF              reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    WHILE           reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    FOR             reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    PRINT           reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    RETURN          reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    $end            reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    }               reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    ELSE            reduce using rule 65 (PRINT_FUN -> PRINT LIST_VALUE ; .)


state 59

    (27) LIST_VALUE -> VALUE , . LIST_VALUE
    (26) LIST_VALUE -> . VALUE
    (27) LIST_VALUE -> . VALUE , LIST_VALUE
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    VALUE                          shift and go to state 33
    LIST_VALUE                     shift and go to state 95
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 60

    (23) MATRIX -> MATRIX ' .

    '               reduce using rule 23 (MATRIX -> MATRIX ' .)
    ,               reduce using rule 23 (MATRIX -> MATRIX ' .)
    ;               reduce using rule 23 (MATRIX -> MATRIX ' .)
    +               reduce using rule 23 (MATRIX -> MATRIX ' .)
    -               reduce using rule 23 (MATRIX -> MATRIX ' .)
    *               reduce using rule 23 (MATRIX -> MATRIX ' .)
    /               reduce using rule 23 (MATRIX -> MATRIX ' .)
    DOTADD          reduce using rule 23 (MATRIX -> MATRIX ' .)
    DOTSUB          reduce using rule 23 (MATRIX -> MATRIX ' .)
    DOTMUL          reduce using rule 23 (MATRIX -> MATRIX ' .)
    DOTDIV          reduce using rule 23 (MATRIX -> MATRIX ' .)
    ]               reduce using rule 23 (MATRIX -> MATRIX ' .)
    LT              reduce using rule 23 (MATRIX -> MATRIX ' .)
    GT              reduce using rule 23 (MATRIX -> MATRIX ' .)
    LE              reduce using rule 23 (MATRIX -> MATRIX ' .)
    GE              reduce using rule 23 (MATRIX -> MATRIX ' .)
    NE              reduce using rule 23 (MATRIX -> MATRIX ' .)
    EQ              reduce using rule 23 (MATRIX -> MATRIX ' .)
    )               reduce using rule 23 (MATRIX -> MATRIX ' .)
    :               reduce using rule 23 (MATRIX -> MATRIX ' .)
    {               reduce using rule 23 (MATRIX -> MATRIX ' .)
    BREAK           reduce using rule 23 (MATRIX -> MATRIX ' .)
    CONTINUE        reduce using rule 23 (MATRIX -> MATRIX ' .)
    ID              reduce using rule 23 (MATRIX -> MATRIX ' .)
    IF              reduce using rule 23 (MATRIX -> MATRIX ' .)
    WHILE           reduce using rule 23 (MATRIX -> MATRIX ' .)
    FOR             reduce using rule 23 (MATRIX -> MATRIX ' .)
    PRINT           reduce using rule 23 (MATRIX -> MATRIX ' .)
    RETURN          reduce using rule 23 (MATRIX -> MATRIX ' .)


state 61

    (14) VALUE_SINGLE -> ID ' .

    ,               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    ;               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    +               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    -               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    *               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    /               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    DOTADD          reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    DOTSUB          reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    DOTMUL          reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    DOTDIV          reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    ]               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    LT              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    GT              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    LE              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    GE              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    NE              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    EQ              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    )               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    :               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    {               reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    BREAK           reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    CONTINUE        reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    ID              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    IF              reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    WHILE           reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    FOR             reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    PRINT           reduce using rule 14 (VALUE_SINGLE -> ID ' .)
    RETURN          reduce using rule 14 (VALUE_SINGLE -> ID ' .)


state 62

    (19) MATRIX_ROW_LIST -> [ . LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ . LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ]
    (17) LIST_VALUE_SINGLE -> . VALUE_SINGLE
    (18) LIST_VALUE_SINGLE -> . VALUE_SINGLE , LIST_VALUE_SINGLE
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39

    LIST_VALUE_SINGLE              shift and go to state 96
    VALUE_SINGLE                   shift and go to state 65

state 63

    (21) MATRIX -> [ MATRIX_ROW_LIST . ]

    ]               shift and go to state 97


state 64

    (22) MATRIX -> [ LIST_VALUE_SINGLE . ]

    ]               shift and go to state 98


state 65

    (17) LIST_VALUE_SINGLE -> VALUE_SINGLE .
    (18) LIST_VALUE_SINGLE -> VALUE_SINGLE . , LIST_VALUE_SINGLE

    ]               reduce using rule 17 (LIST_VALUE_SINGLE -> VALUE_SINGLE .)
    ,               shift and go to state 99


state 66

    (66) RETURN_FUN -> RETURN LIST_VALUE ; .

    {               reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    BREAK           reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    CONTINUE        reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    ID              reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    IF              reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    WHILE           reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    FOR             reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    PRINT           reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    RETURN          reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    $end            reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    }               reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    ELSE            reduce using rule 66 (RETURN_FUN -> RETURN LIST_VALUE ; .)


state 67

    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP . ARTHMETIC_EXP
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 100
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 68

    (28) ARITHMETIC_OP -> + .

    (               reduce using rule 28 (ARITHMETIC_OP -> + .)
    EYE             reduce using rule 28 (ARITHMETIC_OP -> + .)
    ZEROS           reduce using rule 28 (ARITHMETIC_OP -> + .)
    ONES            reduce using rule 28 (ARITHMETIC_OP -> + .)
    +               reduce using rule 28 (ARITHMETIC_OP -> + .)
    -               reduce using rule 28 (ARITHMETIC_OP -> + .)
    INTNUM          reduce using rule 28 (ARITHMETIC_OP -> + .)
    FLOATNUM        reduce using rule 28 (ARITHMETIC_OP -> + .)
    ID              reduce using rule 28 (ARITHMETIC_OP -> + .)
    STRING          reduce using rule 28 (ARITHMETIC_OP -> + .)
    [               reduce using rule 28 (ARITHMETIC_OP -> + .)


state 69

    (29) ARITHMETIC_OP -> - .

    (               reduce using rule 29 (ARITHMETIC_OP -> - .)
    EYE             reduce using rule 29 (ARITHMETIC_OP -> - .)
    ZEROS           reduce using rule 29 (ARITHMETIC_OP -> - .)
    ONES            reduce using rule 29 (ARITHMETIC_OP -> - .)
    +               reduce using rule 29 (ARITHMETIC_OP -> - .)
    -               reduce using rule 29 (ARITHMETIC_OP -> - .)
    INTNUM          reduce using rule 29 (ARITHMETIC_OP -> - .)
    FLOATNUM        reduce using rule 29 (ARITHMETIC_OP -> - .)
    ID              reduce using rule 29 (ARITHMETIC_OP -> - .)
    STRING          reduce using rule 29 (ARITHMETIC_OP -> - .)
    [               reduce using rule 29 (ARITHMETIC_OP -> - .)


state 70

    (30) ARITHMETIC_OP -> * .

    (               reduce using rule 30 (ARITHMETIC_OP -> * .)
    EYE             reduce using rule 30 (ARITHMETIC_OP -> * .)
    ZEROS           reduce using rule 30 (ARITHMETIC_OP -> * .)
    ONES            reduce using rule 30 (ARITHMETIC_OP -> * .)
    +               reduce using rule 30 (ARITHMETIC_OP -> * .)
    -               reduce using rule 30 (ARITHMETIC_OP -> * .)
    INTNUM          reduce using rule 30 (ARITHMETIC_OP -> * .)
    FLOATNUM        reduce using rule 30 (ARITHMETIC_OP -> * .)
    ID              reduce using rule 30 (ARITHMETIC_OP -> * .)
    STRING          reduce using rule 30 (ARITHMETIC_OP -> * .)
    [               reduce using rule 30 (ARITHMETIC_OP -> * .)


state 71

    (31) ARITHMETIC_OP -> / .

    (               reduce using rule 31 (ARITHMETIC_OP -> / .)
    EYE             reduce using rule 31 (ARITHMETIC_OP -> / .)
    ZEROS           reduce using rule 31 (ARITHMETIC_OP -> / .)
    ONES            reduce using rule 31 (ARITHMETIC_OP -> / .)
    +               reduce using rule 31 (ARITHMETIC_OP -> / .)
    -               reduce using rule 31 (ARITHMETIC_OP -> / .)
    INTNUM          reduce using rule 31 (ARITHMETIC_OP -> / .)
    FLOATNUM        reduce using rule 31 (ARITHMETIC_OP -> / .)
    ID              reduce using rule 31 (ARITHMETIC_OP -> / .)
    STRING          reduce using rule 31 (ARITHMETIC_OP -> / .)
    [               reduce using rule 31 (ARITHMETIC_OP -> / .)


state 72

    (32) ARITHMETIC_OP -> DOTADD .

    (               reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    EYE             reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    ZEROS           reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    ONES            reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    +               reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    -               reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    INTNUM          reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    FLOATNUM        reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    ID              reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    STRING          reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)
    [               reduce using rule 32 (ARITHMETIC_OP -> DOTADD .)


state 73

    (33) ARITHMETIC_OP -> DOTSUB .

    (               reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    EYE             reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    ZEROS           reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    ONES            reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    +               reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    -               reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    INTNUM          reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    FLOATNUM        reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    ID              reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    STRING          reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)
    [               reduce using rule 33 (ARITHMETIC_OP -> DOTSUB .)


state 74

    (34) ARITHMETIC_OP -> DOTMUL .

    (               reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    EYE             reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    ZEROS           reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    ONES            reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    +               reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    -               reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    INTNUM          reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    FLOATNUM        reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    ID              reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    STRING          reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)
    [               reduce using rule 34 (ARITHMETIC_OP -> DOTMUL .)


state 75

    (35) ARITHMETIC_OP -> DOTDIV .

    (               reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    EYE             reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    ZEROS           reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    ONES            reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    +               reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    -               reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    INTNUM          reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    FLOATNUM        reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    ID              reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    STRING          reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)
    [               reduce using rule 35 (ARITHMETIC_OP -> DOTDIV .)


state 76

    (56) ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .
    (48) ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR . ARTHMETIC_EXP
    (56) ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR . ARITHMETIC_OP_UNAR
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for EYE resolved as shift
  ! shift/reduce conflict for ZEROS resolved as shift
  ! shift/reduce conflict for ONES resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for INTNUM resolved as shift
  ! shift/reduce conflict for FLOATNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

  ! (               [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! EYE             [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! ZEROS           [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! ONES            [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! +               [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! -               [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! INTNUM          [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! FLOATNUM        [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! ID              [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! STRING          [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]
  ! [               [ reduce using rule 56 (ARITHMETIC_OP_UNAR -> ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR .) ]

    ARITHMETIC_OP_UNAR             shift and go to state 76
    ARTHMETIC_EXP                  shift and go to state 77
    VALUE                          shift and go to state 44
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 77

    (48) ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    LT              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    GT              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    LE              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    GE              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    NE              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    EQ              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    )               reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    :               reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    {               reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    BREAK           reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    CONTINUE        reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    ID              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    IF              reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    WHILE           reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    FOR             reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    PRINT           reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    RETURN          reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! +               [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! -               [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! *               [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! /               [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! DOTADD          [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! DOTSUB          [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! DOTMUL          [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]
  ! DOTDIV          [ reduce using rule 48 (ARTHMETIC_EXP -> ARITHMETIC_OP_UNAR ARTHMETIC_EXP .) ]

    ARITHMETIC_OP                  shift and go to state 67

state 78

    (50) ARTHMETIC_EXP -> ( ARTHMETIC_EXP . )
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 101
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 79

    (51) ARTHMETIC_EXP -> EYE ( . ARTHMETIC_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 102
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 80

    (52) ARTHMETIC_EXP -> ZEROS ( . ARTHMETIC_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 103
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 81

    (53) ARTHMETIC_EXP -> ONES ( . ARTHMETIC_EXP )
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 104
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 82

    (60) ASSIGN_EXP -> ID [ LIST_VALUE ] . ASSIGN_OP ARTHMETIC_EXP
    (36) ASSIGN_OP -> . ADDASSIGN
    (37) ASSIGN_OP -> . SUBASSIGN
    (38) ASSIGN_OP -> . MULASSIGN
    (39) ASSIGN_OP -> . DIVASSIGN
    (40) ASSIGN_OP -> . =

    ADDASSIGN       shift and go to state 24
    SUBASSIGN       shift and go to state 25
    MULASSIGN       shift and go to state 26
    DIVASSIGN       shift and go to state 27
    =               shift and go to state 28

    ASSIGN_OP                      shift and go to state 105

state 83

    (58) RELATION_EXP -> ( RELATION_EXP . )

    )               shift and go to state 106


state 84

    (50) ARTHMETIC_EXP -> ( ARTHMETIC_EXP . )
    (57) RELATION_EXP -> ARTHMETIC_EXP . RELATION_OP ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (41) RELATION_OP -> . LT
    (42) RELATION_OP -> . GT
    (43) RELATION_OP -> . LE
    (44) RELATION_OP -> . GE
    (45) RELATION_OP -> . NE
    (46) RELATION_OP -> . EQ
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 101
    LT              shift and go to state 87
    GT              shift and go to state 88
    LE              shift and go to state 89
    GE              shift and go to state 90
    NE              shift and go to state 91
    EQ              shift and go to state 92
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    RELATION_OP                    shift and go to state 86
    ARITHMETIC_OP                  shift and go to state 67

state 85

    (61) IF_INSTR -> IF ( RELATION_EXP ) . START
    (62) IF_INSTR -> IF ( RELATION_EXP ) . START ELSE START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 107
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 86

    (57) RELATION_EXP -> ARTHMETIC_EXP RELATION_OP . ARTHMETIC_EXP
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 108
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 87

    (41) RELATION_OP -> LT .

    (               reduce using rule 41 (RELATION_OP -> LT .)
    EYE             reduce using rule 41 (RELATION_OP -> LT .)
    ZEROS           reduce using rule 41 (RELATION_OP -> LT .)
    ONES            reduce using rule 41 (RELATION_OP -> LT .)
    +               reduce using rule 41 (RELATION_OP -> LT .)
    -               reduce using rule 41 (RELATION_OP -> LT .)
    INTNUM          reduce using rule 41 (RELATION_OP -> LT .)
    FLOATNUM        reduce using rule 41 (RELATION_OP -> LT .)
    ID              reduce using rule 41 (RELATION_OP -> LT .)
    STRING          reduce using rule 41 (RELATION_OP -> LT .)
    [               reduce using rule 41 (RELATION_OP -> LT .)


state 88

    (42) RELATION_OP -> GT .

    (               reduce using rule 42 (RELATION_OP -> GT .)
    EYE             reduce using rule 42 (RELATION_OP -> GT .)
    ZEROS           reduce using rule 42 (RELATION_OP -> GT .)
    ONES            reduce using rule 42 (RELATION_OP -> GT .)
    +               reduce using rule 42 (RELATION_OP -> GT .)
    -               reduce using rule 42 (RELATION_OP -> GT .)
    INTNUM          reduce using rule 42 (RELATION_OP -> GT .)
    FLOATNUM        reduce using rule 42 (RELATION_OP -> GT .)
    ID              reduce using rule 42 (RELATION_OP -> GT .)
    STRING          reduce using rule 42 (RELATION_OP -> GT .)
    [               reduce using rule 42 (RELATION_OP -> GT .)


state 89

    (43) RELATION_OP -> LE .

    (               reduce using rule 43 (RELATION_OP -> LE .)
    EYE             reduce using rule 43 (RELATION_OP -> LE .)
    ZEROS           reduce using rule 43 (RELATION_OP -> LE .)
    ONES            reduce using rule 43 (RELATION_OP -> LE .)
    +               reduce using rule 43 (RELATION_OP -> LE .)
    -               reduce using rule 43 (RELATION_OP -> LE .)
    INTNUM          reduce using rule 43 (RELATION_OP -> LE .)
    FLOATNUM        reduce using rule 43 (RELATION_OP -> LE .)
    ID              reduce using rule 43 (RELATION_OP -> LE .)
    STRING          reduce using rule 43 (RELATION_OP -> LE .)
    [               reduce using rule 43 (RELATION_OP -> LE .)


state 90

    (44) RELATION_OP -> GE .

    (               reduce using rule 44 (RELATION_OP -> GE .)
    EYE             reduce using rule 44 (RELATION_OP -> GE .)
    ZEROS           reduce using rule 44 (RELATION_OP -> GE .)
    ONES            reduce using rule 44 (RELATION_OP -> GE .)
    +               reduce using rule 44 (RELATION_OP -> GE .)
    -               reduce using rule 44 (RELATION_OP -> GE .)
    INTNUM          reduce using rule 44 (RELATION_OP -> GE .)
    FLOATNUM        reduce using rule 44 (RELATION_OP -> GE .)
    ID              reduce using rule 44 (RELATION_OP -> GE .)
    STRING          reduce using rule 44 (RELATION_OP -> GE .)
    [               reduce using rule 44 (RELATION_OP -> GE .)


state 91

    (45) RELATION_OP -> NE .

    (               reduce using rule 45 (RELATION_OP -> NE .)
    EYE             reduce using rule 45 (RELATION_OP -> NE .)
    ZEROS           reduce using rule 45 (RELATION_OP -> NE .)
    ONES            reduce using rule 45 (RELATION_OP -> NE .)
    +               reduce using rule 45 (RELATION_OP -> NE .)
    -               reduce using rule 45 (RELATION_OP -> NE .)
    INTNUM          reduce using rule 45 (RELATION_OP -> NE .)
    FLOATNUM        reduce using rule 45 (RELATION_OP -> NE .)
    ID              reduce using rule 45 (RELATION_OP -> NE .)
    STRING          reduce using rule 45 (RELATION_OP -> NE .)
    [               reduce using rule 45 (RELATION_OP -> NE .)


state 92

    (46) RELATION_OP -> EQ .

    (               reduce using rule 46 (RELATION_OP -> EQ .)
    EYE             reduce using rule 46 (RELATION_OP -> EQ .)
    ZEROS           reduce using rule 46 (RELATION_OP -> EQ .)
    ONES            reduce using rule 46 (RELATION_OP -> EQ .)
    +               reduce using rule 46 (RELATION_OP -> EQ .)
    -               reduce using rule 46 (RELATION_OP -> EQ .)
    INTNUM          reduce using rule 46 (RELATION_OP -> EQ .)
    FLOATNUM        reduce using rule 46 (RELATION_OP -> EQ .)
    ID              reduce using rule 46 (RELATION_OP -> EQ .)
    STRING          reduce using rule 46 (RELATION_OP -> EQ .)
    [               reduce using rule 46 (RELATION_OP -> EQ .)


state 93

    (63) WHILE_INSTR -> WHILE ( RELATION_EXP ) . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 109
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 94

    (64) FOR_INSTR -> FOR ID = ARTHMETIC_EXP . : ARTHMETIC_EXP START
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    :               shift and go to state 110
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 95

    (27) LIST_VALUE -> VALUE , LIST_VALUE .

    ;               reduce using rule 27 (LIST_VALUE -> VALUE , LIST_VALUE .)
    ]               reduce using rule 27 (LIST_VALUE -> VALUE , LIST_VALUE .)


state 96

    (19) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE . ] , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE . ] , [ LIST_VALUE_SINGLE ]

    ]               shift and go to state 111


state 97

    (21) MATRIX -> [ MATRIX_ROW_LIST ] .

    '               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    ,               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    ;               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    +               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    -               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    *               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    /               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    DOTADD          reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    DOTSUB          reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    DOTMUL          reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    DOTDIV          reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    ]               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    LT              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    GT              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    LE              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    GE              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    NE              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    EQ              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    )               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    :               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    {               reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    BREAK           reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    CONTINUE        reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    ID              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    IF              reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    WHILE           reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    FOR             reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    PRINT           reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)
    RETURN          reduce using rule 21 (MATRIX -> [ MATRIX_ROW_LIST ] .)


state 98

    (22) MATRIX -> [ LIST_VALUE_SINGLE ] .

    '               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    ,               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    ;               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    +               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    -               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    *               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    /               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    DOTADD          reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    DOTSUB          reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    DOTMUL          reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    DOTDIV          reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    ]               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    LT              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    GT              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    LE              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    GE              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    NE              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    EQ              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    )               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    :               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    {               reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    BREAK           reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    CONTINUE        reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    ID              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    IF              reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    WHILE           reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    FOR             reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    PRINT           reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)
    RETURN          reduce using rule 22 (MATRIX -> [ LIST_VALUE_SINGLE ] .)


state 99

    (18) LIST_VALUE_SINGLE -> VALUE_SINGLE , . LIST_VALUE_SINGLE
    (17) LIST_VALUE_SINGLE -> . VALUE_SINGLE
    (18) LIST_VALUE_SINGLE -> . VALUE_SINGLE , LIST_VALUE_SINGLE
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39

    VALUE_SINGLE                   shift and go to state 65
    LIST_VALUE_SINGLE              shift and go to state 112

state 100

    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    LT              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    GT              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    LE              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    GE              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    NE              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    EQ              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    )               reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    :               reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    {               reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    BREAK           reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    CONTINUE        reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    ID              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    IF              reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    WHILE           reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    FOR             reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    PRINT           reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    RETURN          reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! +               [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! -               [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! *               [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! /               [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! DOTADD          [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! DOTSUB          [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! DOTMUL          [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]
  ! DOTDIV          [ reduce using rule 49 (ARTHMETIC_EXP -> ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP .) ]

    ARITHMETIC_OP                  shift and go to state 67

state 101

    (50) ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .

    +               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    -               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    *               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    /               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    DOTADD          reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    DOTSUB          reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    DOTMUL          reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    DOTDIV          reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    ;               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    LT              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    GT              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    LE              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    GE              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    NE              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    EQ              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    )               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    :               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    {               reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    BREAK           reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    CONTINUE        reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    ID              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    IF              reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    WHILE           reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    FOR             reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    PRINT           reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)
    RETURN          reduce using rule 50 (ARTHMETIC_EXP -> ( ARTHMETIC_EXP ) .)


state 102

    (51) ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP . )
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 113
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 103

    (52) ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP . )
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 114
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 104

    (53) ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP . )
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 115
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 105

    (60) ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP . ARTHMETIC_EXP
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 116
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 106

    (58) RELATION_EXP -> ( RELATION_EXP ) .

    )               reduce using rule 58 (RELATION_EXP -> ( RELATION_EXP ) .)


state 107

    (61) IF_INSTR -> IF ( RELATION_EXP ) START .
    (62) IF_INSTR -> IF ( RELATION_EXP ) START . ELSE START
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    BREAK           reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    CONTINUE        reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    ID              reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    PRINT           reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    RETURN          reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    $end            reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    }               reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .)
    ELSE            shift and go to state 117
    {               shift and go to state 2
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

  ! {               [ reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .) ]
  ! IF              [ reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .) ]
  ! WHILE           [ reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .) ]
  ! FOR             [ reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .) ]
  ! ELSE            [ reduce using rule 61 (IF_INSTR -> IF ( RELATION_EXP ) START .) ]
  ! BREAK           [ shift and go to state 9 ]
  ! CONTINUE        [ shift and go to state 10 ]
  ! ID              [ shift and go to state 11 ]
  ! PRINT           [ shift and go to state 15 ]
  ! RETURN          [ shift and go to state 16 ]

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 108

    (57) RELATION_EXP -> ARTHMETIC_EXP RELATION_OP ARTHMETIC_EXP .
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    )               reduce using rule 57 (RELATION_EXP -> ARTHMETIC_EXP RELATION_OP ARTHMETIC_EXP .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 109

    (63) WHILE_INSTR -> WHILE ( RELATION_EXP ) START .
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    BREAK           reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    CONTINUE        reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    ID              reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    PRINT           reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    RETURN          reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    $end            reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    }               reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    ELSE            reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .)
    {               shift and go to state 2
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

  ! {               [ reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .) ]
  ! IF              [ reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .) ]
  ! WHILE           [ reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .) ]
  ! FOR             [ reduce using rule 63 (WHILE_INSTR -> WHILE ( RELATION_EXP ) START .) ]
  ! BREAK           [ shift and go to state 9 ]
  ! CONTINUE        [ shift and go to state 10 ]
  ! ID              [ shift and go to state 11 ]
  ! PRINT           [ shift and go to state 15 ]
  ! RETURN          [ shift and go to state 16 ]

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 110

    (64) FOR_INSTR -> FOR ID = ARTHMETIC_EXP : . ARTHMETIC_EXP START
    (47) ARTHMETIC_EXP -> . VALUE
    (48) ARTHMETIC_EXP -> . ARITHMETIC_OP_UNAR ARTHMETIC_EXP
    (49) ARTHMETIC_EXP -> . ARTHMETIC_EXP ARITHMETIC_OP ARTHMETIC_EXP
    (50) ARTHMETIC_EXP -> . ( ARTHMETIC_EXP )
    (51) ARTHMETIC_EXP -> . EYE ( ARTHMETIC_EXP )
    (52) ARTHMETIC_EXP -> . ZEROS ( ARTHMETIC_EXP )
    (53) ARTHMETIC_EXP -> . ONES ( ARTHMETIC_EXP )
    (24) VALUE -> . VALUE_SINGLE
    (25) VALUE -> . MATRIX
    (54) ARITHMETIC_OP_UNAR -> . +
    (55) ARITHMETIC_OP_UNAR -> . -
    (56) ARITHMETIC_OP_UNAR -> . ARITHMETIC_OP_UNAR ARITHMETIC_OP_UNAR
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING
    (21) MATRIX -> . [ MATRIX_ROW_LIST ]
    (22) MATRIX -> . [ LIST_VALUE_SINGLE ]
    (23) MATRIX -> . MATRIX '

    (               shift and go to state 46
    EYE             shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39
    [               shift and go to state 40

    ARTHMETIC_EXP                  shift and go to state 118
    VALUE                          shift and go to state 44
    ARITHMETIC_OP_UNAR             shift and go to state 45
    VALUE_SINGLE                   shift and go to state 34
    MATRIX                         shift and go to state 35

state 111

    (19) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] . , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] . , [ LIST_VALUE_SINGLE ]

    ,               shift and go to state 119


state 112

    (18) LIST_VALUE_SINGLE -> VALUE_SINGLE , LIST_VALUE_SINGLE .

    ]               reduce using rule 18 (LIST_VALUE_SINGLE -> VALUE_SINGLE , LIST_VALUE_SINGLE .)


state 113

    (51) ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .

    +               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    -               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    *               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    /               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    DOTADD          reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    DOTSUB          reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    DOTMUL          reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    DOTDIV          reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    ;               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    LT              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    GT              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    LE              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    GE              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    NE              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    EQ              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    )               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    :               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    {               reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    BREAK           reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    CONTINUE        reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    ID              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    IF              reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    WHILE           reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    FOR             reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    PRINT           reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)
    RETURN          reduce using rule 51 (ARTHMETIC_EXP -> EYE ( ARTHMETIC_EXP ) .)


state 114

    (52) ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .

    +               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    -               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    *               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    /               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    DOTADD          reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    DOTSUB          reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    DOTMUL          reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    DOTDIV          reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    ;               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    LT              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    GT              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    LE              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    GE              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    NE              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    EQ              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    )               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    :               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    {               reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    BREAK           reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    CONTINUE        reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    ID              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    IF              reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    WHILE           reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    FOR             reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    PRINT           reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)
    RETURN          reduce using rule 52 (ARTHMETIC_EXP -> ZEROS ( ARTHMETIC_EXP ) .)


state 115

    (53) ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .

    +               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    -               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    *               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    /               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    DOTADD          reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    DOTSUB          reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    DOTMUL          reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    DOTDIV          reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    ;               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    LT              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    GT              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    LE              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    GE              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    NE              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    EQ              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    )               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    :               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    {               reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    BREAK           reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    CONTINUE        reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    ID              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    IF              reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    WHILE           reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    FOR             reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    PRINT           reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)
    RETURN          reduce using rule 53 (ARTHMETIC_EXP -> ONES ( ARTHMETIC_EXP ) .)


state 116

    (60) ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP .
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV

    ;               reduce using rule 60 (ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

    ARITHMETIC_OP                  shift and go to state 67

state 117

    (62) IF_INSTR -> IF ( RELATION_EXP ) START ELSE . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 120
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 118

    (64) FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP . START
    (49) ARTHMETIC_EXP -> ARTHMETIC_EXP . ARITHMETIC_OP ARTHMETIC_EXP
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (28) ARITHMETIC_OP -> . +
    (29) ARITHMETIC_OP -> . -
    (30) ARITHMETIC_OP -> . *
    (31) ARITHMETIC_OP -> . /
    (32) ARITHMETIC_OP -> . DOTADD
    (33) ARITHMETIC_OP -> . DOTSUB
    (34) ARITHMETIC_OP -> . DOTMUL
    (35) ARITHMETIC_OP -> . DOTDIV
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 2
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    PRINT           shift and go to state 15
    RETURN          shift and go to state 16

    START                          shift and go to state 121
    ARITHMETIC_OP                  shift and go to state 67
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 119

    (19) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , . MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , . [ LIST_VALUE_SINGLE ]
    (19) MATRIX_ROW_LIST -> . [ LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> . [ LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ]

    [               shift and go to state 122

    MATRIX_ROW_LIST                shift and go to state 123

state 120

    (62) IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    BREAK           reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    CONTINUE        reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    ID              reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    IF              reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    WHILE           reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    FOR             reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    PRINT           reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    RETURN          reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    $end            reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    }               reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)
    ELSE            reduce using rule 62 (IF_INSTR -> IF ( RELATION_EXP ) START ELSE START .)

  ! {               [ shift and go to state 2 ]
  ! BREAK           [ shift and go to state 9 ]
  ! CONTINUE        [ shift and go to state 10 ]
  ! ID              [ shift and go to state 11 ]
  ! IF              [ shift and go to state 12 ]
  ! WHILE           [ shift and go to state 13 ]
  ! FOR             [ shift and go to state 14 ]
  ! PRINT           [ shift and go to state 15 ]
  ! RETURN          [ shift and go to state 16 ]

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 121

    (64) FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .
    (2) START -> START . START
    (1) START -> . { START }
    (2) START -> . START START
    (3) START -> . ASSIGN_EXP ;
    (4) START -> . IF_INSTR
    (5) START -> . WHILE_INSTR
    (6) START -> . FOR_INSTR
    (7) START -> . PRINT_FUN
    (8) START -> . RETURN_FUN
    (9) START -> . BREAK ;
    (10) START -> . CONTINUE ;
    (59) ASSIGN_EXP -> . ID ASSIGN_OP ARTHMETIC_EXP
    (60) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARTHMETIC_EXP
    (61) IF_INSTR -> . IF ( RELATION_EXP ) START
    (62) IF_INSTR -> . IF ( RELATION_EXP ) START ELSE START
    (63) WHILE_INSTR -> . WHILE ( RELATION_EXP ) START
    (64) FOR_INSTR -> . FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START
    (65) PRINT_FUN -> . PRINT LIST_VALUE ;
    (66) RETURN_FUN -> . RETURN LIST_VALUE ;

    BREAK           reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    CONTINUE        reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    ID              reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    PRINT           reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    RETURN          reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    $end            reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    }               reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    ELSE            reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .)
    {               shift and go to state 2
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

  ! {               [ reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .) ]
  ! IF              [ reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .) ]
  ! WHILE           [ reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .) ]
  ! FOR             [ reduce using rule 64 (FOR_INSTR -> FOR ID = ARTHMETIC_EXP : ARTHMETIC_EXP START .) ]
  ! BREAK           [ shift and go to state 9 ]
  ! CONTINUE        [ shift and go to state 10 ]
  ! ID              [ shift and go to state 11 ]
  ! PRINT           [ shift and go to state 15 ]
  ! RETURN          [ shift and go to state 16 ]

    START                          shift and go to state 17
    ASSIGN_EXP                     shift and go to state 3
    IF_INSTR                       shift and go to state 4
    WHILE_INSTR                    shift and go to state 5
    FOR_INSTR                      shift and go to state 6
    PRINT_FUN                      shift and go to state 7
    RETURN_FUN                     shift and go to state 8

state 122

    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , [ . LIST_VALUE_SINGLE ]
    (19) MATRIX_ROW_LIST -> [ . LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ . LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ]
    (17) LIST_VALUE_SINGLE -> . VALUE_SINGLE
    (18) LIST_VALUE_SINGLE -> . VALUE_SINGLE , LIST_VALUE_SINGLE
    (12) VALUE_SINGLE -> . INTNUM
    (13) VALUE_SINGLE -> . FLOATNUM
    (14) VALUE_SINGLE -> . ID '
    (15) VALUE_SINGLE -> . ID
    (16) VALUE_SINGLE -> . STRING

    INTNUM          shift and go to state 36
    FLOATNUM        shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 39

    LIST_VALUE_SINGLE              shift and go to state 124
    VALUE_SINGLE                   shift and go to state 65

state 123

    (19) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST .

    ]               reduce using rule 19 (MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , MATRIX_ROW_LIST .)


state 124

    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE . ]
    (19) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE . ] , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE . ] , [ LIST_VALUE_SINGLE ]

    ]               shift and go to state 125


state 125

    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ] .
    (19) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] . , MATRIX_ROW_LIST
    (20) MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] . , [ LIST_VALUE_SINGLE ]

    ]               reduce using rule 20 (MATRIX_ROW_LIST -> [ LIST_VALUE_SINGLE ] , [ LIST_VALUE_SINGLE ] .)
    ,               shift and go to state 119

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for { in state 17 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 17 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 17 resolved as shift
WARNING: shift/reduce conflict for ID in state 17 resolved as shift
WARNING: shift/reduce conflict for IF in state 17 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 17 resolved as shift
WARNING: shift/reduce conflict for FOR in state 17 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 17 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 17 resolved as shift
WARNING: shift/reduce conflict for ( in state 76 resolved as shift
WARNING: shift/reduce conflict for EYE in state 76 resolved as shift
WARNING: shift/reduce conflict for ZEROS in state 76 resolved as shift
WARNING: shift/reduce conflict for ONES in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for INTNUM in state 76 resolved as shift
WARNING: shift/reduce conflict for FLOATNUM in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for STRING in state 76 resolved as shift
WARNING: shift/reduce conflict for [ in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 77 resolved as shift
WARNING: shift/reduce conflict for - in state 77 resolved as shift
WARNING: shift/reduce conflict for * in state 77 resolved as shift
WARNING: shift/reduce conflict for / in state 77 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 77 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 77 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 77 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 77 resolved as shift
WARNING: shift/reduce conflict for + in state 100 resolved as shift
WARNING: shift/reduce conflict for - in state 100 resolved as shift
WARNING: shift/reduce conflict for * in state 100 resolved as shift
WARNING: shift/reduce conflict for / in state 100 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 100 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 100 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 100 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 100 resolved as shift
