Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> START
Rule 1     START -> START INSTRUCTION
Rule 2     START -> INSTRUCTION
Rule 3     INSTRUCTION -> { START }
Rule 4     INSTRUCTION -> ASSIGN_EXP ;
Rule 5     INSTRUCTION -> IF_INSTRUCTION
Rule 6     INSTRUCTION -> WHILE_INSTRUCTION
Rule 7     INSTRUCTION -> FOR_INSTRUCTION
Rule 8     INSTRUCTION -> PRINT_FUN
Rule 9     INSTRUCTION -> RETURN_FUN
Rule 10    INSTRUCTION -> BREAK ;
Rule 11    INSTRUCTION -> CONTINUE ;
Rule 12    empty -> <empty>
Rule 13    VECTOR_LIST -> VECTOR_LIST , [ LIST_VALUE ]
Rule 14    VECTOR_LIST -> [ LIST_VALUE ] , [ LIST_VALUE ]
Rule 15    MATRIX -> [ LIST_VALUE ]
Rule 16    MATRIX -> [ VECTOR_LIST ]
Rule 17    VALUE -> INTNUM
Rule 18    VALUE -> FLOATNUM
Rule 19    VALUE -> ID '
Rule 20    VALUE -> ID
Rule 21    VALUE -> STRING
Rule 22    VALUE -> EYE ( ARITHMETIC_EXP )
Rule 23    VALUE -> ZEROS ( ARITHMETIC_EXP )
Rule 24    VALUE -> ONES ( ARITHMETIC_EXP )
Rule 25    VALUE -> MATRIX
Rule 26    VALUE -> MATRIX '
Rule 27    LIST_VALUE -> VALUE
Rule 28    LIST_VALUE -> VALUE , LIST_VALUE
Rule 29    ARITHMETIC_OP -> +
Rule 30    ARITHMETIC_OP -> -
Rule 31    ARITHMETIC_OP -> *
Rule 32    ARITHMETIC_OP -> /
Rule 33    ARITHMETIC_OP -> DOTADD
Rule 34    ARITHMETIC_OP -> DOTSUB
Rule 35    ARITHMETIC_OP -> DOTMUL
Rule 36    ARITHMETIC_OP -> DOTDIV
Rule 37    ASSIGN_OP -> ADDASSIGN
Rule 38    ASSIGN_OP -> SUBASSIGN
Rule 39    ASSIGN_OP -> MULASSIGN
Rule 40    ASSIGN_OP -> DIVASSIGN
Rule 41    ASSIGN_OP -> =
Rule 42    RELATION_OP -> GT
Rule 43    RELATION_OP -> LT
Rule 44    RELATION_OP -> LE
Rule 45    RELATION_OP -> GE
Rule 46    RELATION_OP -> NE
Rule 47    RELATION_OP -> EQ
Rule 48    ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
Rule 49    ARITHMETIC_EXP -> ( ARITHMETIC_EXP )
Rule 50    ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP
Rule 51    ARITHMETIC_EXP -> VALUE
Rule 52    ARITHMETIC_OP_UNARY -> +
Rule 53    ARITHMETIC_OP_UNARY -> -
Rule 54    RELATION_EXP -> ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP
Rule 55    RELATION_EXP -> ( RELATION_EXP )
Rule 56    ASSIGN_EXP -> ID ASSIGN_OP ARITHMETIC_EXP
Rule 57    ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
Rule 58    IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION
Rule 59    IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
Rule 60    WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION
Rule 61    FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
Rule 62    PRINT_FUN -> PRINT LIST_VALUE ;
Rule 63    RETURN_FUN -> RETURN LIST_VALUE ;

Terminals, with rules where they appear

'                    : 19 26
(                    : 22 23 24 49 55 58 59 60
)                    : 22 23 24 49 55 58 59 60
*                    : 31
+                    : 29 52
,                    : 13 14 28
-                    : 30 53
/                    : 32
:                    : 61
;                    : 4 10 11 62 63
=                    : 41 61
ADDASSIGN            : 37
BREAK                : 10
CONTINUE             : 11
DIVASSIGN            : 40
DOTADD               : 33
DOTDIV               : 36
DOTMUL               : 35
DOTSUB               : 34
ELSE                 : 59
EQ                   : 47
EYE                  : 22
FLOATNUM             : 18
FOR                  : 61
GE                   : 45
GT                   : 42
ID                   : 19 20 56 57 61
IF                   : 58 59
INTNUM               : 17
LE                   : 44
LT                   : 43
MULASSIGN            : 39
NE                   : 46
ONES                 : 24
PRINT                : 62
RETURN               : 63
STRING               : 21
SUBASSIGN            : 38
WHILE                : 60
ZEROS                : 23
[                    : 13 14 14 15 16 57
]                    : 13 14 14 15 16 57
error                : 
{                    : 3
}                    : 3

Nonterminals, with rules where they appear

ARITHMETIC_EXP       : 22 23 24 48 48 49 50 54 54 56 57 61 61
ARITHMETIC_OP        : 48
ARITHMETIC_OP_UNARY  : 50
ASSIGN_EXP           : 4
ASSIGN_OP            : 56 57
FOR_INSTRUCTION      : 7
IF_INSTRUCTION       : 5
INSTRUCTION          : 1 2 58 59 59 60 61
LIST_VALUE           : 13 14 14 15 28 57 62 63
MATRIX               : 25 26
PRINT_FUN            : 8
RELATION_EXP         : 55 58 59 60
RELATION_OP          : 54
RETURN_FUN           : 9
START                : 1 3 0
VALUE                : 27 28 51
VECTOR_LIST          : 13 16
WHILE_INSTRUCTION    : 6
empty                : 

Parsing method: LALR

state 0

    (0) S' -> . START
    (1) START -> . START INSTRUCTION
    (2) START -> . INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    START                          shift and go to state 1
    INSTRUCTION                    shift and go to state 2
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 1

    (0) S' -> START .
    (1) START -> START . INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    INSTRUCTION                    shift and go to state 18
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 2

    (2) START -> INSTRUCTION .

    {               reduce using rule 2 (START -> INSTRUCTION .)
    BREAK           reduce using rule 2 (START -> INSTRUCTION .)
    CONTINUE        reduce using rule 2 (START -> INSTRUCTION .)
    ID              reduce using rule 2 (START -> INSTRUCTION .)
    IF              reduce using rule 2 (START -> INSTRUCTION .)
    WHILE           reduce using rule 2 (START -> INSTRUCTION .)
    FOR             reduce using rule 2 (START -> INSTRUCTION .)
    PRINT           reduce using rule 2 (START -> INSTRUCTION .)
    RETURN          reduce using rule 2 (START -> INSTRUCTION .)
    $end            reduce using rule 2 (START -> INSTRUCTION .)
    }               reduce using rule 2 (START -> INSTRUCTION .)


state 3

    (3) INSTRUCTION -> { . START }
    (1) START -> . START INSTRUCTION
    (2) START -> . INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    START                          shift and go to state 19
    INSTRUCTION                    shift and go to state 2
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 4

    (4) INSTRUCTION -> ASSIGN_EXP . ;

    ;               shift and go to state 20


state 5

    (5) INSTRUCTION -> IF_INSTRUCTION .

    {               reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    BREAK           reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    CONTINUE        reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    ID              reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    IF              reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    WHILE           reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    FOR             reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    PRINT           reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    RETURN          reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    $end            reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    }               reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)
    ELSE            reduce using rule 5 (INSTRUCTION -> IF_INSTRUCTION .)


state 6

    (6) INSTRUCTION -> WHILE_INSTRUCTION .

    {               reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    BREAK           reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    CONTINUE        reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    ID              reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    IF              reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    WHILE           reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    FOR             reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    PRINT           reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    RETURN          reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    $end            reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    }               reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)
    ELSE            reduce using rule 6 (INSTRUCTION -> WHILE_INSTRUCTION .)


state 7

    (7) INSTRUCTION -> FOR_INSTRUCTION .

    {               reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    BREAK           reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    CONTINUE        reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    ID              reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    IF              reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    WHILE           reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    FOR             reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    PRINT           reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    RETURN          reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    $end            reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    }               reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)
    ELSE            reduce using rule 7 (INSTRUCTION -> FOR_INSTRUCTION .)


state 8

    (8) INSTRUCTION -> PRINT_FUN .

    {               reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    BREAK           reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    CONTINUE        reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    ID              reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    IF              reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    WHILE           reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    FOR             reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    PRINT           reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    RETURN          reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    $end            reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    }               reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)
    ELSE            reduce using rule 8 (INSTRUCTION -> PRINT_FUN .)


state 9

    (9) INSTRUCTION -> RETURN_FUN .

    {               reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    BREAK           reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    CONTINUE        reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    ID              reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    IF              reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    WHILE           reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    FOR             reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    PRINT           reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    RETURN          reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    $end            reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    }               reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)
    ELSE            reduce using rule 9 (INSTRUCTION -> RETURN_FUN .)


state 10

    (10) INSTRUCTION -> BREAK . ;

    ;               shift and go to state 21


state 11

    (11) INSTRUCTION -> CONTINUE . ;

    ;               shift and go to state 22


state 12

    (56) ASSIGN_EXP -> ID . ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> ID . [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (37) ASSIGN_OP -> . ADDASSIGN
    (38) ASSIGN_OP -> . SUBASSIGN
    (39) ASSIGN_OP -> . MULASSIGN
    (40) ASSIGN_OP -> . DIVASSIGN
    (41) ASSIGN_OP -> . =

    [               shift and go to state 24
    ADDASSIGN       shift and go to state 25
    SUBASSIGN       shift and go to state 26
    MULASSIGN       shift and go to state 27
    DIVASSIGN       shift and go to state 28
    =               shift and go to state 29

    ASSIGN_OP                      shift and go to state 23

state 13

    (58) IF_INSTRUCTION -> IF . ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> IF . ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION

    (               shift and go to state 30


state 14

    (60) WHILE_INSTRUCTION -> WHILE . ( RELATION_EXP ) INSTRUCTION

    (               shift and go to state 31


state 15

    (61) FOR_INSTRUCTION -> FOR . ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION

    ID              shift and go to state 32


state 16

    (62) PRINT_FUN -> PRINT . LIST_VALUE ;
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    LIST_VALUE                     shift and go to state 33
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 17

    (63) RETURN_FUN -> RETURN . LIST_VALUE ;
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    LIST_VALUE                     shift and go to state 44
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 18

    (1) START -> START INSTRUCTION .

    {               reduce using rule 1 (START -> START INSTRUCTION .)
    BREAK           reduce using rule 1 (START -> START INSTRUCTION .)
    CONTINUE        reduce using rule 1 (START -> START INSTRUCTION .)
    ID              reduce using rule 1 (START -> START INSTRUCTION .)
    IF              reduce using rule 1 (START -> START INSTRUCTION .)
    WHILE           reduce using rule 1 (START -> START INSTRUCTION .)
    FOR             reduce using rule 1 (START -> START INSTRUCTION .)
    PRINT           reduce using rule 1 (START -> START INSTRUCTION .)
    RETURN          reduce using rule 1 (START -> START INSTRUCTION .)
    $end            reduce using rule 1 (START -> START INSTRUCTION .)
    }               reduce using rule 1 (START -> START INSTRUCTION .)


state 19

    (3) INSTRUCTION -> { START . }
    (1) START -> START . INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    }               shift and go to state 45
    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    INSTRUCTION                    shift and go to state 18
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 20

    (4) INSTRUCTION -> ASSIGN_EXP ; .

    {               reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    BREAK           reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    CONTINUE        reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    ID              reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    IF              reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    WHILE           reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    FOR             reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    PRINT           reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    RETURN          reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    $end            reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    }               reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)
    ELSE            reduce using rule 4 (INSTRUCTION -> ASSIGN_EXP ; .)


state 21

    (10) INSTRUCTION -> BREAK ; .

    {               reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    BREAK           reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    CONTINUE        reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    ID              reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    IF              reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    WHILE           reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    FOR             reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    PRINT           reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    RETURN          reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    $end            reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    }               reduce using rule 10 (INSTRUCTION -> BREAK ; .)
    ELSE            reduce using rule 10 (INSTRUCTION -> BREAK ; .)


state 22

    (11) INSTRUCTION -> CONTINUE ; .

    {               reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    BREAK           reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    CONTINUE        reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    ID              reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    IF              reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    WHILE           reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    FOR             reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    PRINT           reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    RETURN          reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    $end            reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    }               reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)
    ELSE            reduce using rule 11 (INSTRUCTION -> CONTINUE ; .)


state 23

    (56) ASSIGN_EXP -> ID ASSIGN_OP . ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 46
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 24

    (57) ASSIGN_EXP -> ID [ . LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    LIST_VALUE                     shift and go to state 52
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 25

    (37) ASSIGN_OP -> ADDASSIGN .

    (               reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    +               reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    -               reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    INTNUM          reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    FLOATNUM        reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    ID              reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    STRING          reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    EYE             reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    ZEROS           reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    ONES            reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)
    [               reduce using rule 37 (ASSIGN_OP -> ADDASSIGN .)


state 26

    (38) ASSIGN_OP -> SUBASSIGN .

    (               reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    +               reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    -               reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    INTNUM          reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    FLOATNUM        reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    ID              reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    STRING          reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    EYE             reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    ZEROS           reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    ONES            reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)
    [               reduce using rule 38 (ASSIGN_OP -> SUBASSIGN .)


state 27

    (39) ASSIGN_OP -> MULASSIGN .

    (               reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    +               reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    -               reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    INTNUM          reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    FLOATNUM        reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    ID              reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    STRING          reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    EYE             reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    ZEROS           reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    ONES            reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)
    [               reduce using rule 39 (ASSIGN_OP -> MULASSIGN .)


state 28

    (40) ASSIGN_OP -> DIVASSIGN .

    (               reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    +               reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    -               reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    INTNUM          reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    FLOATNUM        reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    ID              reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    STRING          reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    EYE             reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    ZEROS           reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    ONES            reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)
    [               reduce using rule 40 (ASSIGN_OP -> DIVASSIGN .)


state 29

    (41) ASSIGN_OP -> = .

    (               reduce using rule 41 (ASSIGN_OP -> = .)
    +               reduce using rule 41 (ASSIGN_OP -> = .)
    -               reduce using rule 41 (ASSIGN_OP -> = .)
    INTNUM          reduce using rule 41 (ASSIGN_OP -> = .)
    FLOATNUM        reduce using rule 41 (ASSIGN_OP -> = .)
    ID              reduce using rule 41 (ASSIGN_OP -> = .)
    STRING          reduce using rule 41 (ASSIGN_OP -> = .)
    EYE             reduce using rule 41 (ASSIGN_OP -> = .)
    ZEROS           reduce using rule 41 (ASSIGN_OP -> = .)
    ONES            reduce using rule 41 (ASSIGN_OP -> = .)
    [               reduce using rule 41 (ASSIGN_OP -> = .)


state 30

    (58) IF_INSTRUCTION -> IF ( . RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> IF ( . RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (54) RELATION_EXP -> . ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP
    (55) RELATION_EXP -> . ( RELATION_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 53
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    RELATION_EXP                   shift and go to state 54
    ARITHMETIC_EXP                 shift and go to state 55
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 31

    (60) WHILE_INSTRUCTION -> WHILE ( . RELATION_EXP ) INSTRUCTION
    (54) RELATION_EXP -> . ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP
    (55) RELATION_EXP -> . ( RELATION_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 53
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    RELATION_EXP                   shift and go to state 56
    ARITHMETIC_EXP                 shift and go to state 55
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 32

    (61) FOR_INSTRUCTION -> FOR ID . = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION

    =               shift and go to state 57


state 33

    (62) PRINT_FUN -> PRINT LIST_VALUE . ;

    ;               shift and go to state 58


state 34

    (27) LIST_VALUE -> VALUE .
    (28) LIST_VALUE -> VALUE . , LIST_VALUE

    ;               reduce using rule 27 (LIST_VALUE -> VALUE .)
    ]               reduce using rule 27 (LIST_VALUE -> VALUE .)
    ,               shift and go to state 59


state 35

    (17) VALUE -> INTNUM .

    ,               reduce using rule 17 (VALUE -> INTNUM .)
    ;               reduce using rule 17 (VALUE -> INTNUM .)
    +               reduce using rule 17 (VALUE -> INTNUM .)
    -               reduce using rule 17 (VALUE -> INTNUM .)
    *               reduce using rule 17 (VALUE -> INTNUM .)
    /               reduce using rule 17 (VALUE -> INTNUM .)
    DOTADD          reduce using rule 17 (VALUE -> INTNUM .)
    DOTSUB          reduce using rule 17 (VALUE -> INTNUM .)
    DOTMUL          reduce using rule 17 (VALUE -> INTNUM .)
    DOTDIV          reduce using rule 17 (VALUE -> INTNUM .)
    ]               reduce using rule 17 (VALUE -> INTNUM .)
    GT              reduce using rule 17 (VALUE -> INTNUM .)
    LT              reduce using rule 17 (VALUE -> INTNUM .)
    LE              reduce using rule 17 (VALUE -> INTNUM .)
    GE              reduce using rule 17 (VALUE -> INTNUM .)
    NE              reduce using rule 17 (VALUE -> INTNUM .)
    EQ              reduce using rule 17 (VALUE -> INTNUM .)
    )               reduce using rule 17 (VALUE -> INTNUM .)
    :               reduce using rule 17 (VALUE -> INTNUM .)
    {               reduce using rule 17 (VALUE -> INTNUM .)
    BREAK           reduce using rule 17 (VALUE -> INTNUM .)
    CONTINUE        reduce using rule 17 (VALUE -> INTNUM .)
    ID              reduce using rule 17 (VALUE -> INTNUM .)
    IF              reduce using rule 17 (VALUE -> INTNUM .)
    WHILE           reduce using rule 17 (VALUE -> INTNUM .)
    FOR             reduce using rule 17 (VALUE -> INTNUM .)
    PRINT           reduce using rule 17 (VALUE -> INTNUM .)
    RETURN          reduce using rule 17 (VALUE -> INTNUM .)


state 36

    (18) VALUE -> FLOATNUM .

    ,               reduce using rule 18 (VALUE -> FLOATNUM .)
    ;               reduce using rule 18 (VALUE -> FLOATNUM .)
    +               reduce using rule 18 (VALUE -> FLOATNUM .)
    -               reduce using rule 18 (VALUE -> FLOATNUM .)
    *               reduce using rule 18 (VALUE -> FLOATNUM .)
    /               reduce using rule 18 (VALUE -> FLOATNUM .)
    DOTADD          reduce using rule 18 (VALUE -> FLOATNUM .)
    DOTSUB          reduce using rule 18 (VALUE -> FLOATNUM .)
    DOTMUL          reduce using rule 18 (VALUE -> FLOATNUM .)
    DOTDIV          reduce using rule 18 (VALUE -> FLOATNUM .)
    ]               reduce using rule 18 (VALUE -> FLOATNUM .)
    GT              reduce using rule 18 (VALUE -> FLOATNUM .)
    LT              reduce using rule 18 (VALUE -> FLOATNUM .)
    LE              reduce using rule 18 (VALUE -> FLOATNUM .)
    GE              reduce using rule 18 (VALUE -> FLOATNUM .)
    NE              reduce using rule 18 (VALUE -> FLOATNUM .)
    EQ              reduce using rule 18 (VALUE -> FLOATNUM .)
    )               reduce using rule 18 (VALUE -> FLOATNUM .)
    :               reduce using rule 18 (VALUE -> FLOATNUM .)
    {               reduce using rule 18 (VALUE -> FLOATNUM .)
    BREAK           reduce using rule 18 (VALUE -> FLOATNUM .)
    CONTINUE        reduce using rule 18 (VALUE -> FLOATNUM .)
    ID              reduce using rule 18 (VALUE -> FLOATNUM .)
    IF              reduce using rule 18 (VALUE -> FLOATNUM .)
    WHILE           reduce using rule 18 (VALUE -> FLOATNUM .)
    FOR             reduce using rule 18 (VALUE -> FLOATNUM .)
    PRINT           reduce using rule 18 (VALUE -> FLOATNUM .)
    RETURN          reduce using rule 18 (VALUE -> FLOATNUM .)


state 37

    (19) VALUE -> ID . '
    (20) VALUE -> ID .

    '               shift and go to state 60
    ,               reduce using rule 20 (VALUE -> ID .)
    ;               reduce using rule 20 (VALUE -> ID .)
    +               reduce using rule 20 (VALUE -> ID .)
    -               reduce using rule 20 (VALUE -> ID .)
    *               reduce using rule 20 (VALUE -> ID .)
    /               reduce using rule 20 (VALUE -> ID .)
    DOTADD          reduce using rule 20 (VALUE -> ID .)
    DOTSUB          reduce using rule 20 (VALUE -> ID .)
    DOTMUL          reduce using rule 20 (VALUE -> ID .)
    DOTDIV          reduce using rule 20 (VALUE -> ID .)
    ]               reduce using rule 20 (VALUE -> ID .)
    GT              reduce using rule 20 (VALUE -> ID .)
    LT              reduce using rule 20 (VALUE -> ID .)
    LE              reduce using rule 20 (VALUE -> ID .)
    GE              reduce using rule 20 (VALUE -> ID .)
    NE              reduce using rule 20 (VALUE -> ID .)
    EQ              reduce using rule 20 (VALUE -> ID .)
    )               reduce using rule 20 (VALUE -> ID .)
    :               reduce using rule 20 (VALUE -> ID .)
    {               reduce using rule 20 (VALUE -> ID .)
    BREAK           reduce using rule 20 (VALUE -> ID .)
    CONTINUE        reduce using rule 20 (VALUE -> ID .)
    ID              reduce using rule 20 (VALUE -> ID .)
    IF              reduce using rule 20 (VALUE -> ID .)
    WHILE           reduce using rule 20 (VALUE -> ID .)
    FOR             reduce using rule 20 (VALUE -> ID .)
    PRINT           reduce using rule 20 (VALUE -> ID .)
    RETURN          reduce using rule 20 (VALUE -> ID .)


state 38

    (21) VALUE -> STRING .

    ,               reduce using rule 21 (VALUE -> STRING .)
    ;               reduce using rule 21 (VALUE -> STRING .)
    +               reduce using rule 21 (VALUE -> STRING .)
    -               reduce using rule 21 (VALUE -> STRING .)
    *               reduce using rule 21 (VALUE -> STRING .)
    /               reduce using rule 21 (VALUE -> STRING .)
    DOTADD          reduce using rule 21 (VALUE -> STRING .)
    DOTSUB          reduce using rule 21 (VALUE -> STRING .)
    DOTMUL          reduce using rule 21 (VALUE -> STRING .)
    DOTDIV          reduce using rule 21 (VALUE -> STRING .)
    ]               reduce using rule 21 (VALUE -> STRING .)
    GT              reduce using rule 21 (VALUE -> STRING .)
    LT              reduce using rule 21 (VALUE -> STRING .)
    LE              reduce using rule 21 (VALUE -> STRING .)
    GE              reduce using rule 21 (VALUE -> STRING .)
    NE              reduce using rule 21 (VALUE -> STRING .)
    EQ              reduce using rule 21 (VALUE -> STRING .)
    )               reduce using rule 21 (VALUE -> STRING .)
    :               reduce using rule 21 (VALUE -> STRING .)
    {               reduce using rule 21 (VALUE -> STRING .)
    BREAK           reduce using rule 21 (VALUE -> STRING .)
    CONTINUE        reduce using rule 21 (VALUE -> STRING .)
    ID              reduce using rule 21 (VALUE -> STRING .)
    IF              reduce using rule 21 (VALUE -> STRING .)
    WHILE           reduce using rule 21 (VALUE -> STRING .)
    FOR             reduce using rule 21 (VALUE -> STRING .)
    PRINT           reduce using rule 21 (VALUE -> STRING .)
    RETURN          reduce using rule 21 (VALUE -> STRING .)


state 39

    (22) VALUE -> EYE . ( ARITHMETIC_EXP )

    (               shift and go to state 61


state 40

    (23) VALUE -> ZEROS . ( ARITHMETIC_EXP )

    (               shift and go to state 62


state 41

    (24) VALUE -> ONES . ( ARITHMETIC_EXP )

    (               shift and go to state 63


state 42

    (25) VALUE -> MATRIX .
    (26) VALUE -> MATRIX . '

    ,               reduce using rule 25 (VALUE -> MATRIX .)
    ;               reduce using rule 25 (VALUE -> MATRIX .)
    +               reduce using rule 25 (VALUE -> MATRIX .)
    -               reduce using rule 25 (VALUE -> MATRIX .)
    *               reduce using rule 25 (VALUE -> MATRIX .)
    /               reduce using rule 25 (VALUE -> MATRIX .)
    DOTADD          reduce using rule 25 (VALUE -> MATRIX .)
    DOTSUB          reduce using rule 25 (VALUE -> MATRIX .)
    DOTMUL          reduce using rule 25 (VALUE -> MATRIX .)
    DOTDIV          reduce using rule 25 (VALUE -> MATRIX .)
    ]               reduce using rule 25 (VALUE -> MATRIX .)
    GT              reduce using rule 25 (VALUE -> MATRIX .)
    LT              reduce using rule 25 (VALUE -> MATRIX .)
    LE              reduce using rule 25 (VALUE -> MATRIX .)
    GE              reduce using rule 25 (VALUE -> MATRIX .)
    NE              reduce using rule 25 (VALUE -> MATRIX .)
    EQ              reduce using rule 25 (VALUE -> MATRIX .)
    )               reduce using rule 25 (VALUE -> MATRIX .)
    :               reduce using rule 25 (VALUE -> MATRIX .)
    {               reduce using rule 25 (VALUE -> MATRIX .)
    BREAK           reduce using rule 25 (VALUE -> MATRIX .)
    CONTINUE        reduce using rule 25 (VALUE -> MATRIX .)
    ID              reduce using rule 25 (VALUE -> MATRIX .)
    IF              reduce using rule 25 (VALUE -> MATRIX .)
    WHILE           reduce using rule 25 (VALUE -> MATRIX .)
    FOR             reduce using rule 25 (VALUE -> MATRIX .)
    PRINT           reduce using rule 25 (VALUE -> MATRIX .)
    RETURN          reduce using rule 25 (VALUE -> MATRIX .)
    '               shift and go to state 64


state 43

    (15) MATRIX -> [ . LIST_VALUE ]
    (16) MATRIX -> [ . VECTOR_LIST ]
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (13) VECTOR_LIST -> . VECTOR_LIST , [ LIST_VALUE ]
    (14) VECTOR_LIST -> . [ LIST_VALUE ] , [ LIST_VALUE ]
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    [               shift and go to state 65
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41

    LIST_VALUE                     shift and go to state 66
    VECTOR_LIST                    shift and go to state 67
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 44

    (63) RETURN_FUN -> RETURN LIST_VALUE . ;

    ;               shift and go to state 68


state 45

    (3) INSTRUCTION -> { START } .

    {               reduce using rule 3 (INSTRUCTION -> { START } .)
    BREAK           reduce using rule 3 (INSTRUCTION -> { START } .)
    CONTINUE        reduce using rule 3 (INSTRUCTION -> { START } .)
    ID              reduce using rule 3 (INSTRUCTION -> { START } .)
    IF              reduce using rule 3 (INSTRUCTION -> { START } .)
    WHILE           reduce using rule 3 (INSTRUCTION -> { START } .)
    FOR             reduce using rule 3 (INSTRUCTION -> { START } .)
    PRINT           reduce using rule 3 (INSTRUCTION -> { START } .)
    RETURN          reduce using rule 3 (INSTRUCTION -> { START } .)
    $end            reduce using rule 3 (INSTRUCTION -> { START } .)
    }               reduce using rule 3 (INSTRUCTION -> { START } .)
    ELSE            reduce using rule 3 (INSTRUCTION -> { START } .)


state 46

    (56) ASSIGN_EXP -> ID ASSIGN_OP ARITHMETIC_EXP .
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    ;               reduce using rule 56 (ASSIGN_EXP -> ID ASSIGN_OP ARITHMETIC_EXP .)
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 47

    (49) ARITHMETIC_EXP -> ( . ARITHMETIC_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 78
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 48

    (50) ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY . ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_OP_UNARY            shift and go to state 48
    ARITHMETIC_EXP                 shift and go to state 79
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 49

    (51) ARITHMETIC_EXP -> VALUE .

    +               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    -               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    *               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    /               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    DOTADD          reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    DOTSUB          reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    DOTMUL          reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    DOTDIV          reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    ;               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    GT              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    LT              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    LE              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    GE              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    NE              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    EQ              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    )               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    :               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    {               reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    BREAK           reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    CONTINUE        reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    ID              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    IF              reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    WHILE           reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    FOR             reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    PRINT           reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)
    RETURN          reduce using rule 51 (ARITHMETIC_EXP -> VALUE .)


state 50

    (52) ARITHMETIC_OP_UNARY -> + .

    (               reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    +               reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    -               reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    INTNUM          reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    FLOATNUM        reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    ID              reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    STRING          reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    EYE             reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    ZEROS           reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    ONES            reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)
    [               reduce using rule 52 (ARITHMETIC_OP_UNARY -> + .)


state 51

    (53) ARITHMETIC_OP_UNARY -> - .

    (               reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    +               reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    -               reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    INTNUM          reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    FLOATNUM        reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    ID              reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    STRING          reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    EYE             reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    ZEROS           reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    ONES            reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)
    [               reduce using rule 53 (ARITHMETIC_OP_UNARY -> - .)


state 52

    (57) ASSIGN_EXP -> ID [ LIST_VALUE . ] ASSIGN_OP ARITHMETIC_EXP

    ]               shift and go to state 80


state 53

    (55) RELATION_EXP -> ( . RELATION_EXP )
    (49) ARITHMETIC_EXP -> ( . ARITHMETIC_EXP )
    (54) RELATION_EXP -> . ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP
    (55) RELATION_EXP -> . ( RELATION_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 53
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    RELATION_EXP                   shift and go to state 81
    ARITHMETIC_EXP                 shift and go to state 82
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 54

    (58) IF_INSTRUCTION -> IF ( RELATION_EXP . ) INSTRUCTION
    (59) IF_INSTRUCTION -> IF ( RELATION_EXP . ) INSTRUCTION ELSE INSTRUCTION

    )               shift and go to state 83


state 55

    (54) RELATION_EXP -> ARITHMETIC_EXP . RELATION_OP ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (42) RELATION_OP -> . GT
    (43) RELATION_OP -> . LT
    (44) RELATION_OP -> . LE
    (45) RELATION_OP -> . GE
    (46) RELATION_OP -> . NE
    (47) RELATION_OP -> . EQ
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    GT              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GE              shift and go to state 88
    NE              shift and go to state 89
    EQ              shift and go to state 90
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    RELATION_OP                    shift and go to state 84
    ARITHMETIC_OP                  shift and go to state 69

state 56

    (60) WHILE_INSTRUCTION -> WHILE ( RELATION_EXP . ) INSTRUCTION

    )               shift and go to state 91


state 57

    (61) FOR_INSTRUCTION -> FOR ID = . ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 92
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 58

    (62) PRINT_FUN -> PRINT LIST_VALUE ; .

    {               reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    BREAK           reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    CONTINUE        reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    ID              reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    IF              reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    WHILE           reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    FOR             reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    PRINT           reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    RETURN          reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    $end            reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    }               reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)
    ELSE            reduce using rule 62 (PRINT_FUN -> PRINT LIST_VALUE ; .)


state 59

    (28) LIST_VALUE -> VALUE , . LIST_VALUE
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    VALUE                          shift and go to state 34
    LIST_VALUE                     shift and go to state 93
    MATRIX                         shift and go to state 42

state 60

    (19) VALUE -> ID ' .

    ,               reduce using rule 19 (VALUE -> ID ' .)
    ;               reduce using rule 19 (VALUE -> ID ' .)
    +               reduce using rule 19 (VALUE -> ID ' .)
    -               reduce using rule 19 (VALUE -> ID ' .)
    *               reduce using rule 19 (VALUE -> ID ' .)
    /               reduce using rule 19 (VALUE -> ID ' .)
    DOTADD          reduce using rule 19 (VALUE -> ID ' .)
    DOTSUB          reduce using rule 19 (VALUE -> ID ' .)
    DOTMUL          reduce using rule 19 (VALUE -> ID ' .)
    DOTDIV          reduce using rule 19 (VALUE -> ID ' .)
    ]               reduce using rule 19 (VALUE -> ID ' .)
    GT              reduce using rule 19 (VALUE -> ID ' .)
    LT              reduce using rule 19 (VALUE -> ID ' .)
    LE              reduce using rule 19 (VALUE -> ID ' .)
    GE              reduce using rule 19 (VALUE -> ID ' .)
    NE              reduce using rule 19 (VALUE -> ID ' .)
    EQ              reduce using rule 19 (VALUE -> ID ' .)
    )               reduce using rule 19 (VALUE -> ID ' .)
    :               reduce using rule 19 (VALUE -> ID ' .)
    {               reduce using rule 19 (VALUE -> ID ' .)
    BREAK           reduce using rule 19 (VALUE -> ID ' .)
    CONTINUE        reduce using rule 19 (VALUE -> ID ' .)
    ID              reduce using rule 19 (VALUE -> ID ' .)
    IF              reduce using rule 19 (VALUE -> ID ' .)
    WHILE           reduce using rule 19 (VALUE -> ID ' .)
    FOR             reduce using rule 19 (VALUE -> ID ' .)
    PRINT           reduce using rule 19 (VALUE -> ID ' .)
    RETURN          reduce using rule 19 (VALUE -> ID ' .)


state 61

    (22) VALUE -> EYE ( . ARITHMETIC_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 94
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 62

    (23) VALUE -> ZEROS ( . ARITHMETIC_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 95
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 63

    (24) VALUE -> ONES ( . ARITHMETIC_EXP )
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 96
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 64

    (26) VALUE -> MATRIX ' .

    ,               reduce using rule 26 (VALUE -> MATRIX ' .)
    ;               reduce using rule 26 (VALUE -> MATRIX ' .)
    +               reduce using rule 26 (VALUE -> MATRIX ' .)
    -               reduce using rule 26 (VALUE -> MATRIX ' .)
    *               reduce using rule 26 (VALUE -> MATRIX ' .)
    /               reduce using rule 26 (VALUE -> MATRIX ' .)
    DOTADD          reduce using rule 26 (VALUE -> MATRIX ' .)
    DOTSUB          reduce using rule 26 (VALUE -> MATRIX ' .)
    DOTMUL          reduce using rule 26 (VALUE -> MATRIX ' .)
    DOTDIV          reduce using rule 26 (VALUE -> MATRIX ' .)
    ]               reduce using rule 26 (VALUE -> MATRIX ' .)
    GT              reduce using rule 26 (VALUE -> MATRIX ' .)
    LT              reduce using rule 26 (VALUE -> MATRIX ' .)
    LE              reduce using rule 26 (VALUE -> MATRIX ' .)
    GE              reduce using rule 26 (VALUE -> MATRIX ' .)
    NE              reduce using rule 26 (VALUE -> MATRIX ' .)
    EQ              reduce using rule 26 (VALUE -> MATRIX ' .)
    )               reduce using rule 26 (VALUE -> MATRIX ' .)
    :               reduce using rule 26 (VALUE -> MATRIX ' .)
    {               reduce using rule 26 (VALUE -> MATRIX ' .)
    BREAK           reduce using rule 26 (VALUE -> MATRIX ' .)
    CONTINUE        reduce using rule 26 (VALUE -> MATRIX ' .)
    ID              reduce using rule 26 (VALUE -> MATRIX ' .)
    IF              reduce using rule 26 (VALUE -> MATRIX ' .)
    WHILE           reduce using rule 26 (VALUE -> MATRIX ' .)
    FOR             reduce using rule 26 (VALUE -> MATRIX ' .)
    PRINT           reduce using rule 26 (VALUE -> MATRIX ' .)
    RETURN          reduce using rule 26 (VALUE -> MATRIX ' .)


state 65

    (14) VECTOR_LIST -> [ . LIST_VALUE ] , [ LIST_VALUE ]
    (15) MATRIX -> [ . LIST_VALUE ]
    (16) MATRIX -> [ . VECTOR_LIST ]
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (13) VECTOR_LIST -> . VECTOR_LIST , [ LIST_VALUE ]
    (14) VECTOR_LIST -> . [ LIST_VALUE ] , [ LIST_VALUE ]
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    [               shift and go to state 65
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41

    LIST_VALUE                     shift and go to state 97
    VECTOR_LIST                    shift and go to state 67
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 66

    (15) MATRIX -> [ LIST_VALUE . ]

    ]               shift and go to state 98


state 67

    (16) MATRIX -> [ VECTOR_LIST . ]
    (13) VECTOR_LIST -> VECTOR_LIST . , [ LIST_VALUE ]

    ]               shift and go to state 99
    ,               shift and go to state 100


state 68

    (63) RETURN_FUN -> RETURN LIST_VALUE ; .

    {               reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    BREAK           reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    CONTINUE        reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    ID              reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    IF              reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    WHILE           reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    FOR             reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    PRINT           reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    RETURN          reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    $end            reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    }               reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)
    ELSE            reduce using rule 63 (RETURN_FUN -> RETURN LIST_VALUE ; .)


state 69

    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP . ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 101
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 70

    (29) ARITHMETIC_OP -> + .

    (               reduce using rule 29 (ARITHMETIC_OP -> + .)
    +               reduce using rule 29 (ARITHMETIC_OP -> + .)
    -               reduce using rule 29 (ARITHMETIC_OP -> + .)
    INTNUM          reduce using rule 29 (ARITHMETIC_OP -> + .)
    FLOATNUM        reduce using rule 29 (ARITHMETIC_OP -> + .)
    ID              reduce using rule 29 (ARITHMETIC_OP -> + .)
    STRING          reduce using rule 29 (ARITHMETIC_OP -> + .)
    EYE             reduce using rule 29 (ARITHMETIC_OP -> + .)
    ZEROS           reduce using rule 29 (ARITHMETIC_OP -> + .)
    ONES            reduce using rule 29 (ARITHMETIC_OP -> + .)
    [               reduce using rule 29 (ARITHMETIC_OP -> + .)


state 71

    (30) ARITHMETIC_OP -> - .

    (               reduce using rule 30 (ARITHMETIC_OP -> - .)
    +               reduce using rule 30 (ARITHMETIC_OP -> - .)
    -               reduce using rule 30 (ARITHMETIC_OP -> - .)
    INTNUM          reduce using rule 30 (ARITHMETIC_OP -> - .)
    FLOATNUM        reduce using rule 30 (ARITHMETIC_OP -> - .)
    ID              reduce using rule 30 (ARITHMETIC_OP -> - .)
    STRING          reduce using rule 30 (ARITHMETIC_OP -> - .)
    EYE             reduce using rule 30 (ARITHMETIC_OP -> - .)
    ZEROS           reduce using rule 30 (ARITHMETIC_OP -> - .)
    ONES            reduce using rule 30 (ARITHMETIC_OP -> - .)
    [               reduce using rule 30 (ARITHMETIC_OP -> - .)


state 72

    (31) ARITHMETIC_OP -> * .

    (               reduce using rule 31 (ARITHMETIC_OP -> * .)
    +               reduce using rule 31 (ARITHMETIC_OP -> * .)
    -               reduce using rule 31 (ARITHMETIC_OP -> * .)
    INTNUM          reduce using rule 31 (ARITHMETIC_OP -> * .)
    FLOATNUM        reduce using rule 31 (ARITHMETIC_OP -> * .)
    ID              reduce using rule 31 (ARITHMETIC_OP -> * .)
    STRING          reduce using rule 31 (ARITHMETIC_OP -> * .)
    EYE             reduce using rule 31 (ARITHMETIC_OP -> * .)
    ZEROS           reduce using rule 31 (ARITHMETIC_OP -> * .)
    ONES            reduce using rule 31 (ARITHMETIC_OP -> * .)
    [               reduce using rule 31 (ARITHMETIC_OP -> * .)


state 73

    (32) ARITHMETIC_OP -> / .

    (               reduce using rule 32 (ARITHMETIC_OP -> / .)
    +               reduce using rule 32 (ARITHMETIC_OP -> / .)
    -               reduce using rule 32 (ARITHMETIC_OP -> / .)
    INTNUM          reduce using rule 32 (ARITHMETIC_OP -> / .)
    FLOATNUM        reduce using rule 32 (ARITHMETIC_OP -> / .)
    ID              reduce using rule 32 (ARITHMETIC_OP -> / .)
    STRING          reduce using rule 32 (ARITHMETIC_OP -> / .)
    EYE             reduce using rule 32 (ARITHMETIC_OP -> / .)
    ZEROS           reduce using rule 32 (ARITHMETIC_OP -> / .)
    ONES            reduce using rule 32 (ARITHMETIC_OP -> / .)
    [               reduce using rule 32 (ARITHMETIC_OP -> / .)


state 74

    (33) ARITHMETIC_OP -> DOTADD .

    (               reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    +               reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    -               reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    INTNUM          reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    FLOATNUM        reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    ID              reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    STRING          reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    EYE             reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    ZEROS           reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    ONES            reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)
    [               reduce using rule 33 (ARITHMETIC_OP -> DOTADD .)


state 75

    (34) ARITHMETIC_OP -> DOTSUB .

    (               reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    +               reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    -               reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    INTNUM          reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    FLOATNUM        reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    ID              reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    STRING          reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    EYE             reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    ZEROS           reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    ONES            reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)
    [               reduce using rule 34 (ARITHMETIC_OP -> DOTSUB .)


state 76

    (35) ARITHMETIC_OP -> DOTMUL .

    (               reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    +               reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    -               reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    INTNUM          reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    FLOATNUM        reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    ID              reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    STRING          reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    EYE             reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    ZEROS           reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    ONES            reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)
    [               reduce using rule 35 (ARITHMETIC_OP -> DOTMUL .)


state 77

    (36) ARITHMETIC_OP -> DOTDIV .

    (               reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    +               reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    -               reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    INTNUM          reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    FLOATNUM        reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    ID              reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    STRING          reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    EYE             reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    ZEROS           reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    ONES            reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)
    [               reduce using rule 36 (ARITHMETIC_OP -> DOTDIV .)


state 78

    (49) ARITHMETIC_EXP -> ( ARITHMETIC_EXP . )
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 102
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 79

    (50) ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    +               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    -               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    *               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    /               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    DOTADD          reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    DOTSUB          reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    DOTMUL          reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    DOTDIV          reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    ;               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    GT              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    LT              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    LE              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    GE              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    NE              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    EQ              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    )               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    :               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    {               reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    BREAK           reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    CONTINUE        reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    ID              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    IF              reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    WHILE           reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    FOR             reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    PRINT           reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)
    RETURN          reduce using rule 50 (ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP .)

  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 71 ]
  ! *               [ shift and go to state 72 ]
  ! /               [ shift and go to state 73 ]
  ! DOTADD          [ shift and go to state 74 ]
  ! DOTSUB          [ shift and go to state 75 ]
  ! DOTMUL          [ shift and go to state 76 ]
  ! DOTDIV          [ shift and go to state 77 ]

    ARITHMETIC_OP                  shift and go to state 69

state 80

    (57) ASSIGN_EXP -> ID [ LIST_VALUE ] . ASSIGN_OP ARITHMETIC_EXP
    (37) ASSIGN_OP -> . ADDASSIGN
    (38) ASSIGN_OP -> . SUBASSIGN
    (39) ASSIGN_OP -> . MULASSIGN
    (40) ASSIGN_OP -> . DIVASSIGN
    (41) ASSIGN_OP -> . =

    ADDASSIGN       shift and go to state 25
    SUBASSIGN       shift and go to state 26
    MULASSIGN       shift and go to state 27
    DIVASSIGN       shift and go to state 28
    =               shift and go to state 29

    ASSIGN_OP                      shift and go to state 103

state 81

    (55) RELATION_EXP -> ( RELATION_EXP . )

    )               shift and go to state 104


state 82

    (49) ARITHMETIC_EXP -> ( ARITHMETIC_EXP . )
    (54) RELATION_EXP -> ARITHMETIC_EXP . RELATION_OP ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (42) RELATION_OP -> . GT
    (43) RELATION_OP -> . LT
    (44) RELATION_OP -> . LE
    (45) RELATION_OP -> . GE
    (46) RELATION_OP -> . NE
    (47) RELATION_OP -> . EQ
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 102
    GT              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GE              shift and go to state 88
    NE              shift and go to state 89
    EQ              shift and go to state 90
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    RELATION_OP                    shift and go to state 84
    ARITHMETIC_OP                  shift and go to state 69

state 83

    (58) IF_INSTRUCTION -> IF ( RELATION_EXP ) . INSTRUCTION
    (59) IF_INSTRUCTION -> IF ( RELATION_EXP ) . INSTRUCTION ELSE INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    INSTRUCTION                    shift and go to state 105
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 84

    (54) RELATION_EXP -> ARITHMETIC_EXP RELATION_OP . ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 106
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 85

    (42) RELATION_OP -> GT .

    (               reduce using rule 42 (RELATION_OP -> GT .)
    +               reduce using rule 42 (RELATION_OP -> GT .)
    -               reduce using rule 42 (RELATION_OP -> GT .)
    INTNUM          reduce using rule 42 (RELATION_OP -> GT .)
    FLOATNUM        reduce using rule 42 (RELATION_OP -> GT .)
    ID              reduce using rule 42 (RELATION_OP -> GT .)
    STRING          reduce using rule 42 (RELATION_OP -> GT .)
    EYE             reduce using rule 42 (RELATION_OP -> GT .)
    ZEROS           reduce using rule 42 (RELATION_OP -> GT .)
    ONES            reduce using rule 42 (RELATION_OP -> GT .)
    [               reduce using rule 42 (RELATION_OP -> GT .)


state 86

    (43) RELATION_OP -> LT .

    (               reduce using rule 43 (RELATION_OP -> LT .)
    +               reduce using rule 43 (RELATION_OP -> LT .)
    -               reduce using rule 43 (RELATION_OP -> LT .)
    INTNUM          reduce using rule 43 (RELATION_OP -> LT .)
    FLOATNUM        reduce using rule 43 (RELATION_OP -> LT .)
    ID              reduce using rule 43 (RELATION_OP -> LT .)
    STRING          reduce using rule 43 (RELATION_OP -> LT .)
    EYE             reduce using rule 43 (RELATION_OP -> LT .)
    ZEROS           reduce using rule 43 (RELATION_OP -> LT .)
    ONES            reduce using rule 43 (RELATION_OP -> LT .)
    [               reduce using rule 43 (RELATION_OP -> LT .)


state 87

    (44) RELATION_OP -> LE .

    (               reduce using rule 44 (RELATION_OP -> LE .)
    +               reduce using rule 44 (RELATION_OP -> LE .)
    -               reduce using rule 44 (RELATION_OP -> LE .)
    INTNUM          reduce using rule 44 (RELATION_OP -> LE .)
    FLOATNUM        reduce using rule 44 (RELATION_OP -> LE .)
    ID              reduce using rule 44 (RELATION_OP -> LE .)
    STRING          reduce using rule 44 (RELATION_OP -> LE .)
    EYE             reduce using rule 44 (RELATION_OP -> LE .)
    ZEROS           reduce using rule 44 (RELATION_OP -> LE .)
    ONES            reduce using rule 44 (RELATION_OP -> LE .)
    [               reduce using rule 44 (RELATION_OP -> LE .)


state 88

    (45) RELATION_OP -> GE .

    (               reduce using rule 45 (RELATION_OP -> GE .)
    +               reduce using rule 45 (RELATION_OP -> GE .)
    -               reduce using rule 45 (RELATION_OP -> GE .)
    INTNUM          reduce using rule 45 (RELATION_OP -> GE .)
    FLOATNUM        reduce using rule 45 (RELATION_OP -> GE .)
    ID              reduce using rule 45 (RELATION_OP -> GE .)
    STRING          reduce using rule 45 (RELATION_OP -> GE .)
    EYE             reduce using rule 45 (RELATION_OP -> GE .)
    ZEROS           reduce using rule 45 (RELATION_OP -> GE .)
    ONES            reduce using rule 45 (RELATION_OP -> GE .)
    [               reduce using rule 45 (RELATION_OP -> GE .)


state 89

    (46) RELATION_OP -> NE .

    (               reduce using rule 46 (RELATION_OP -> NE .)
    +               reduce using rule 46 (RELATION_OP -> NE .)
    -               reduce using rule 46 (RELATION_OP -> NE .)
    INTNUM          reduce using rule 46 (RELATION_OP -> NE .)
    FLOATNUM        reduce using rule 46 (RELATION_OP -> NE .)
    ID              reduce using rule 46 (RELATION_OP -> NE .)
    STRING          reduce using rule 46 (RELATION_OP -> NE .)
    EYE             reduce using rule 46 (RELATION_OP -> NE .)
    ZEROS           reduce using rule 46 (RELATION_OP -> NE .)
    ONES            reduce using rule 46 (RELATION_OP -> NE .)
    [               reduce using rule 46 (RELATION_OP -> NE .)


state 90

    (47) RELATION_OP -> EQ .

    (               reduce using rule 47 (RELATION_OP -> EQ .)
    +               reduce using rule 47 (RELATION_OP -> EQ .)
    -               reduce using rule 47 (RELATION_OP -> EQ .)
    INTNUM          reduce using rule 47 (RELATION_OP -> EQ .)
    FLOATNUM        reduce using rule 47 (RELATION_OP -> EQ .)
    ID              reduce using rule 47 (RELATION_OP -> EQ .)
    STRING          reduce using rule 47 (RELATION_OP -> EQ .)
    EYE             reduce using rule 47 (RELATION_OP -> EQ .)
    ZEROS           reduce using rule 47 (RELATION_OP -> EQ .)
    ONES            reduce using rule 47 (RELATION_OP -> EQ .)
    [               reduce using rule 47 (RELATION_OP -> EQ .)


state 91

    (60) WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) . INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    INSTRUCTION                    shift and go to state 107
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 92

    (61) FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP . : ARITHMETIC_EXP INSTRUCTION
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    :               shift and go to state 108
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 93

    (28) LIST_VALUE -> VALUE , LIST_VALUE .

    ;               reduce using rule 28 (LIST_VALUE -> VALUE , LIST_VALUE .)
    ]               reduce using rule 28 (LIST_VALUE -> VALUE , LIST_VALUE .)


state 94

    (22) VALUE -> EYE ( ARITHMETIC_EXP . )
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 109
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 95

    (23) VALUE -> ZEROS ( ARITHMETIC_EXP . )
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 110
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 96

    (24) VALUE -> ONES ( ARITHMETIC_EXP . )
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    )               shift and go to state 111
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 97

    (14) VECTOR_LIST -> [ LIST_VALUE . ] , [ LIST_VALUE ]
    (15) MATRIX -> [ LIST_VALUE . ]

    ]               shift and go to state 112


state 98

    (15) MATRIX -> [ LIST_VALUE ] .

    '               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    ,               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    ;               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    +               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    -               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    *               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    /               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    DOTADD          reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    DOTSUB          reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    DOTMUL          reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    DOTDIV          reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    ]               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    GT              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    LT              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    LE              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    GE              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    NE              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    EQ              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    )               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    :               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    {               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    BREAK           reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    CONTINUE        reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    ID              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    IF              reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    WHILE           reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    FOR             reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    PRINT           reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    RETURN          reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)


state 99

    (16) MATRIX -> [ VECTOR_LIST ] .

    '               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    ,               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    ;               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    +               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    -               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    *               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    /               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    DOTADD          reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    DOTSUB          reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    DOTMUL          reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    DOTDIV          reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    ]               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    GT              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    LT              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    LE              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    GE              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    NE              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    EQ              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    )               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    :               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    {               reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    BREAK           reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    CONTINUE        reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    ID              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    IF              reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    WHILE           reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    FOR             reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    PRINT           reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)
    RETURN          reduce using rule 16 (MATRIX -> [ VECTOR_LIST ] .)


state 100

    (13) VECTOR_LIST -> VECTOR_LIST , . [ LIST_VALUE ]

    [               shift and go to state 113


state 101

    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    +               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    -               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    *               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    /               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    DOTADD          reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    DOTSUB          reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    DOTMUL          reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    DOTDIV          reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    ;               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    GT              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    LT              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    LE              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    GE              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    NE              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    EQ              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    )               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    :               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    {               reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    BREAK           reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    CONTINUE        reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    ID              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    IF              reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    WHILE           reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    FOR             reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    PRINT           reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)
    RETURN          reduce using rule 48 (ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP .)

  ! +               [ shift and go to state 70 ]
  ! -               [ shift and go to state 71 ]
  ! *               [ shift and go to state 72 ]
  ! /               [ shift and go to state 73 ]
  ! DOTADD          [ shift and go to state 74 ]
  ! DOTSUB          [ shift and go to state 75 ]
  ! DOTMUL          [ shift and go to state 76 ]
  ! DOTDIV          [ shift and go to state 77 ]

    ARITHMETIC_OP                  shift and go to state 69

state 102

    (49) ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .

    +               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    -               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    *               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    /               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    DOTADD          reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    DOTSUB          reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    DOTMUL          reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    DOTDIV          reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    ;               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    GT              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    LT              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    LE              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    GE              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    NE              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    EQ              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    )               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    :               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    {               reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    BREAK           reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    CONTINUE        reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    ID              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    IF              reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    WHILE           reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    FOR             reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    PRINT           reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)
    RETURN          reduce using rule 49 (ARITHMETIC_EXP -> ( ARITHMETIC_EXP ) .)


state 103

    (57) ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP . ARITHMETIC_EXP
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 114
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 104

    (55) RELATION_EXP -> ( RELATION_EXP ) .

    )               reduce using rule 55 (RELATION_EXP -> ( RELATION_EXP ) .)


state 105

    (58) IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .
    (59) IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION . ELSE INSTRUCTION

    {               reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    BREAK           reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    CONTINUE        reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    ID              reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    IF              reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    WHILE           reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    FOR             reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    PRINT           reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    RETURN          reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    $end            reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    }               reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .)
    ELSE            shift and go to state 115

  ! ELSE            [ reduce using rule 58 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION .) ]


state 106

    (54) RELATION_EXP -> ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP .
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    )               reduce using rule 54 (RELATION_EXP -> ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP .)
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 107

    (60) WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .

    {               reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    BREAK           reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    CONTINUE        reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    ID              reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    IF              reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    WHILE           reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    FOR             reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    PRINT           reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    RETURN          reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    $end            reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    }               reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)
    ELSE            reduce using rule 60 (WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION .)


state 108

    (61) FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : . ARITHMETIC_EXP INSTRUCTION
    (48) ARITHMETIC_EXP -> . ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP
    (49) ARITHMETIC_EXP -> . ( ARITHMETIC_EXP )
    (50) ARITHMETIC_EXP -> . ARITHMETIC_OP_UNARY ARITHMETIC_EXP
    (51) ARITHMETIC_EXP -> . VALUE
    (52) ARITHMETIC_OP_UNARY -> . +
    (53) ARITHMETIC_OP_UNARY -> . -
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    (               shift and go to state 47
    +               shift and go to state 50
    -               shift and go to state 51
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    ARITHMETIC_EXP                 shift and go to state 116
    ARITHMETIC_OP_UNARY            shift and go to state 48
    VALUE                          shift and go to state 49
    MATRIX                         shift and go to state 42

state 109

    (22) VALUE -> EYE ( ARITHMETIC_EXP ) .

    ,               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    ;               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    +               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    -               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    *               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    /               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    DOTADD          reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    DOTSUB          reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    DOTMUL          reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    DOTDIV          reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    ]               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    GT              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    LT              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    LE              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    GE              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    NE              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    EQ              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    )               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    :               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    {               reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    BREAK           reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    CONTINUE        reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    ID              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    IF              reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    WHILE           reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    FOR             reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    PRINT           reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)
    RETURN          reduce using rule 22 (VALUE -> EYE ( ARITHMETIC_EXP ) .)


state 110

    (23) VALUE -> ZEROS ( ARITHMETIC_EXP ) .

    ,               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    ;               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    +               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    -               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    *               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    /               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    DOTADD          reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    DOTSUB          reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    DOTMUL          reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    DOTDIV          reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    ]               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    GT              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    LT              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    LE              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    GE              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    NE              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    EQ              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    )               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    :               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    {               reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    BREAK           reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    CONTINUE        reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    ID              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    IF              reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    WHILE           reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    FOR             reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    PRINT           reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)
    RETURN          reduce using rule 23 (VALUE -> ZEROS ( ARITHMETIC_EXP ) .)


state 111

    (24) VALUE -> ONES ( ARITHMETIC_EXP ) .

    ,               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    ;               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    +               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    -               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    *               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    /               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    DOTADD          reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    DOTSUB          reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    DOTMUL          reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    DOTDIV          reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    ]               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    GT              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    LT              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    LE              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    GE              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    NE              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    EQ              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    )               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    :               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    {               reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    BREAK           reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    CONTINUE        reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    ID              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    IF              reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    WHILE           reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    FOR             reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    PRINT           reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)
    RETURN          reduce using rule 24 (VALUE -> ONES ( ARITHMETIC_EXP ) .)


state 112

    (14) VECTOR_LIST -> [ LIST_VALUE ] . , [ LIST_VALUE ]
    (15) MATRIX -> [ LIST_VALUE ] .

  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 117
    '               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)
    ]               reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .)

  ! ,               [ reduce using rule 15 (MATRIX -> [ LIST_VALUE ] .) ]


state 113

    (13) VECTOR_LIST -> VECTOR_LIST , [ . LIST_VALUE ]
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    LIST_VALUE                     shift and go to state 118
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 114

    (57) ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP .
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV

    ;               reduce using rule 57 (ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP .)
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77

    ARITHMETIC_OP                  shift and go to state 69

state 115

    (59) IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE . INSTRUCTION
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    INSTRUCTION                    shift and go to state 119
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 116

    (61) FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP . INSTRUCTION
    (48) ARITHMETIC_EXP -> ARITHMETIC_EXP . ARITHMETIC_OP ARITHMETIC_EXP
    (3) INSTRUCTION -> . { START }
    (4) INSTRUCTION -> . ASSIGN_EXP ;
    (5) INSTRUCTION -> . IF_INSTRUCTION
    (6) INSTRUCTION -> . WHILE_INSTRUCTION
    (7) INSTRUCTION -> . FOR_INSTRUCTION
    (8) INSTRUCTION -> . PRINT_FUN
    (9) INSTRUCTION -> . RETURN_FUN
    (10) INSTRUCTION -> . BREAK ;
    (11) INSTRUCTION -> . CONTINUE ;
    (29) ARITHMETIC_OP -> . +
    (30) ARITHMETIC_OP -> . -
    (31) ARITHMETIC_OP -> . *
    (32) ARITHMETIC_OP -> . /
    (33) ARITHMETIC_OP -> . DOTADD
    (34) ARITHMETIC_OP -> . DOTSUB
    (35) ARITHMETIC_OP -> . DOTMUL
    (36) ARITHMETIC_OP -> . DOTDIV
    (56) ASSIGN_EXP -> . ID ASSIGN_OP ARITHMETIC_EXP
    (57) ASSIGN_EXP -> . ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP
    (58) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION
    (59) IF_INSTRUCTION -> . IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION
    (60) WHILE_INSTRUCTION -> . WHILE ( RELATION_EXP ) INSTRUCTION
    (61) FOR_INSTRUCTION -> . FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION
    (62) PRINT_FUN -> . PRINT LIST_VALUE ;
    (63) RETURN_FUN -> . RETURN LIST_VALUE ;

    {               shift and go to state 3
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    +               shift and go to state 70
    -               shift and go to state 71
    *               shift and go to state 72
    /               shift and go to state 73
    DOTADD          shift and go to state 74
    DOTSUB          shift and go to state 75
    DOTMUL          shift and go to state 76
    DOTDIV          shift and go to state 77
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 17

    INSTRUCTION                    shift and go to state 120
    ARITHMETIC_OP                  shift and go to state 69
    ASSIGN_EXP                     shift and go to state 4
    IF_INSTRUCTION                 shift and go to state 5
    WHILE_INSTRUCTION              shift and go to state 6
    FOR_INSTRUCTION                shift and go to state 7
    PRINT_FUN                      shift and go to state 8
    RETURN_FUN                     shift and go to state 9

state 117

    (14) VECTOR_LIST -> [ LIST_VALUE ] , . [ LIST_VALUE ]

    [               shift and go to state 121


state 118

    (13) VECTOR_LIST -> VECTOR_LIST , [ LIST_VALUE . ]

    ]               shift and go to state 122


state 119

    (59) IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .

    {               reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    BREAK           reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    CONTINUE        reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    ID              reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    IF              reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    WHILE           reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    FOR             reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    PRINT           reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    RETURN          reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    $end            reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    }               reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)
    ELSE            reduce using rule 59 (IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION .)


state 120

    (61) FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .

    {               reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    BREAK           reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    CONTINUE        reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    ID              reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    IF              reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    WHILE           reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    FOR             reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    PRINT           reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    RETURN          reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    $end            reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    }               reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)
    ELSE            reduce using rule 61 (FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION .)


state 121

    (14) VECTOR_LIST -> [ LIST_VALUE ] , [ . LIST_VALUE ]
    (27) LIST_VALUE -> . VALUE
    (28) LIST_VALUE -> . VALUE , LIST_VALUE
    (17) VALUE -> . INTNUM
    (18) VALUE -> . FLOATNUM
    (19) VALUE -> . ID '
    (20) VALUE -> . ID
    (21) VALUE -> . STRING
    (22) VALUE -> . EYE ( ARITHMETIC_EXP )
    (23) VALUE -> . ZEROS ( ARITHMETIC_EXP )
    (24) VALUE -> . ONES ( ARITHMETIC_EXP )
    (25) VALUE -> . MATRIX
    (26) VALUE -> . MATRIX '
    (15) MATRIX -> . [ LIST_VALUE ]
    (16) MATRIX -> . [ VECTOR_LIST ]

    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    ID              shift and go to state 37
    STRING          shift and go to state 38
    EYE             shift and go to state 39
    ZEROS           shift and go to state 40
    ONES            shift and go to state 41
    [               shift and go to state 43

    LIST_VALUE                     shift and go to state 123
    VALUE                          shift and go to state 34
    MATRIX                         shift and go to state 42

state 122

    (13) VECTOR_LIST -> VECTOR_LIST , [ LIST_VALUE ] .

    ]               reduce using rule 13 (VECTOR_LIST -> VECTOR_LIST , [ LIST_VALUE ] .)
    ,               reduce using rule 13 (VECTOR_LIST -> VECTOR_LIST , [ LIST_VALUE ] .)


state 123

    (14) VECTOR_LIST -> [ LIST_VALUE ] , [ LIST_VALUE . ]

    ]               shift and go to state 124


state 124

    (14) VECTOR_LIST -> [ LIST_VALUE ] , [ LIST_VALUE ] .

    ]               reduce using rule 14 (VECTOR_LIST -> [ LIST_VALUE ] , [ LIST_VALUE ] .)
    ,               reduce using rule 14 (VECTOR_LIST -> [ LIST_VALUE ] , [ LIST_VALUE ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 112 resolved as shift
