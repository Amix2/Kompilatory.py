
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFleftELSEnonassocGTLTLEGENEEQnonassocADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNleft*/DOTMULDOTDIVleft+-DOTADDDOTSUBleftexprrightuminusleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LE LT MULASSIGN NE ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSSTART : START INSTRUCTION\n             | INSTRUCTION INSTRUCTION : \'{\' START \'}\'\n                   | ASSIGN_EXP\n                   | IF_INSTRUCTION\n                   | WHILE_INSTRUCTION\n                   | FOR_INSTRUCTION\n                   | PRINT_FUN\n                   | RETURN_FUN\n                   | BREAK \';\'\n                   | CONTINUE \';\' VECTOR : \'[\' LIST_VALUE \']\'STRING_GR : STRINGINT_GR : INTNUMFLOAT_GR : FLOATNUMID_GR : IDVALUE : INT_GR\n             | FLOAT_GR\n             | ID_GR\n             | STRING_GR\n             | EYE \'(\' ARITHMETIC_EXP \')\'\n             | ZEROS \'(\' ARITHMETIC_EXP \')\'\n             | ONES \'(\' ARITHMETIC_EXP \')\'\n             | VECTOR\n             | ID VECTOR \n             | VALUE "\'" LIST_VALUE : ARITHMETIC_EXP\n                  | ARITHMETIC_EXP \',\' LIST_VALUEARITHMETIC_OP : \'+\'\n                     | \'-\'\n                     | \'*\'\n                     | \'/\'\n                     | DOTADD\n                     | DOTSUB\n                     | DOTMUL\n                     | DOTDIV ASSIGN_OP : ADDASSIGN\n                 | SUBASSIGN\n                 | MULASSIGN\n                 | DIVASSIGN\n                 | \'=\' RELATION_OP : GT\n                   | LT\n                   | LE\n                   | GE\n                   | NE\n                   | EQ ARITHMETIC_OP_UNARY : \'+\'\n                           | \'-\' ARITHMETIC_EXP : ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP %prec expr\n                     | \'(\' ARITHMETIC_EXP \')\'\n                     | ARITHMETIC_OP_UNARY ARITHMETIC_EXP %prec uminus\n                     | VALUERELATION_EXP : ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP\n                    | \'(\' RELATION_EXP \')\'ASSIGN_EXP : ID ASSIGN_OP ARITHMETIC_EXP \';\'\n                    | ID \'[\' LIST_VALUE \']\' ASSIGN_OP ARITHMETIC_EXP \';\' IF_INSTRUCTION : IF \'(\' RELATION_EXP  \')\' INSTRUCTION %prec IF\n                      | IF \'(\' RELATION_EXP  \')\' INSTRUCTION  ELSE INSTRUCTION WHILE_INSTRUCTION : WHILE \'(\' RELATION_EXP  \')\' INSTRUCTION FOR_INSTRUCTION : FOR ID \'=\' ARITHMETIC_EXP \':\' ARITHMETIC_EXP INSTRUCTION PRINT_FUN : PRINT LIST_VALUE \';\'RETURN_FUN : RETURN LIST_VALUE \';\''
    
_lr_action_items = {'{':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[3,3,-2,3,-4,-5,-6,-7,-8,-9,-1,3,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,3,3,-50,-51,-12,-58,-60,-21,-22,-23,3,3,-57,-59,-61,]),'BREAK':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[10,10,-2,10,-4,-5,-6,-7,-8,-9,-1,10,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,10,10,-50,-51,-12,-58,-60,-21,-22,-23,10,10,-57,-59,-61,]),'CONTINUE':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[11,11,-2,11,-4,-5,-6,-7,-8,-9,-1,11,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,11,11,-50,-51,-12,-58,-60,-21,-22,-23,11,11,-57,-59,-61,]),'ID':([0,1,2,3,4,5,6,7,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,36,37,38,39,40,41,42,46,47,48,49,50,51,53,56,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,80,81,85,86,87,88,89,90,91,92,93,96,97,101,102,104,106,107,108,109,110,112,113,114,115,116,],[12,12,-2,12,-4,-5,-6,-7,-8,-9,31,47,47,-1,12,-10,-11,47,47,-37,-38,-39,-40,-41,47,47,47,47,-53,-48,-49,-17,-18,-19,-20,-24,-16,-14,-15,-13,47,-3,47,47,-62,47,47,-29,-30,-31,-32,-33,-34,-35,-36,-52,-26,47,47,47,-25,-63,-56,12,47,-42,-43,-44,-45,-46,-47,12,-50,-51,-12,47,-58,-60,47,-21,-22,-23,12,12,-57,-59,-61,]),'IF':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[13,13,-2,13,-4,-5,-6,-7,-8,-9,-1,13,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,13,13,-50,-51,-12,-58,-60,-21,-22,-23,13,13,-57,-59,-61,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[14,14,-2,14,-4,-5,-6,-7,-8,-9,-1,14,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,14,14,-50,-51,-12,-58,-60,-21,-22,-23,14,14,-57,-59,-61,]),'FOR':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[15,15,-2,15,-4,-5,-6,-7,-8,-9,-1,15,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,15,15,-50,-51,-12,-58,-60,-21,-22,-23,15,15,-57,-59,-61,]),'PRINT':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[16,16,-2,16,-4,-5,-6,-7,-8,-9,-1,16,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,16,16,-50,-51,-12,-58,-60,-21,-22,-23,16,16,-57,-59,-61,]),'RETURN':([0,1,2,3,4,5,6,7,8,9,18,19,20,21,36,39,40,41,42,46,47,48,49,50,53,61,73,74,78,80,81,85,93,96,97,101,104,106,108,109,110,112,113,114,115,116,],[17,17,-2,17,-4,-5,-6,-7,-8,-9,-1,17,-10,-11,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-3,-62,-52,-26,-25,-63,-56,17,17,-50,-51,-12,-58,-60,-21,-22,-23,17,17,-57,-59,-61,]),'$end':([1,2,4,5,6,7,8,9,18,20,21,53,61,80,81,104,106,114,115,116,],[0,-2,-4,-5,-6,-7,-8,-9,-1,-10,-11,-3,-62,-63,-56,-58,-60,-57,-59,-61,]),'}':([2,4,5,6,7,8,9,18,19,20,21,53,61,80,81,104,106,114,115,116,],[-2,-4,-5,-6,-7,-8,-9,-1,53,-10,-11,-3,-62,-63,-56,-58,-60,-57,-59,-61,]),'ELSE':([4,5,6,7,8,9,20,21,53,61,80,81,104,106,114,115,116,],[-4,-5,-6,-7,-8,-9,-10,-11,-3,-62,-63,-56,112,-60,-57,-59,-61,]),';':([10,11,32,33,36,39,40,41,42,46,47,48,49,50,52,54,73,74,78,95,96,97,101,108,109,110,111,],[20,21,61,-27,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,80,81,-52,-26,-25,-28,-50,-51,-12,-21,-22,-23,114,]),'[':([12,16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,47,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[23,51,51,51,51,-37,-38,-39,-40,-41,51,51,51,51,-48,-49,51,51,51,51,51,51,-29,-30,-31,-32,-33,-34,-35,-36,51,51,51,51,-42,-43,-44,-45,-46,-47,51,51,]),'ADDASSIGN':([12,82,],[24,24,]),'SUBASSIGN':([12,82,],[25,25,]),'MULASSIGN':([12,82,],[26,26,]),'DIVASSIGN':([12,82,],[27,27,]),'=':([12,31,82,],[28,60,28,]),'(':([13,14,16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,43,44,45,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[29,30,34,34,34,34,-37,-38,-39,-40,-41,56,56,34,34,-48,-49,75,76,77,34,56,34,34,34,-29,-30,-31,-32,-33,-34,-35,-36,34,34,34,34,-42,-43,-44,-45,-46,-47,34,34,]),'+':([16,17,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,51,54,56,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,84,86,87,88,89,90,91,92,94,96,97,98,99,100,101,102,105,107,108,109,110,111,113,],[37,37,37,37,-37,-38,-39,-40,-41,37,37,64,37,37,-53,-48,-49,-17,-18,-19,-20,-24,-16,-14,-15,-13,37,64,37,64,37,37,37,-29,-30,-31,-32,-33,-34,-35,-36,64,-52,-26,37,37,37,-25,64,37,-42,-43,-44,-45,-46,-47,64,-50,-51,64,64,64,-12,37,64,37,-21,-22,-23,64,64,]),'-':([16,17,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,51,54,56,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,84,86,87,88,89,90,91,92,94,96,97,98,99,100,101,102,105,107,108,109,110,111,113,],[38,38,38,38,-37,-38,-39,-40,-41,38,38,65,38,38,-53,-48,-49,-17,-18,-19,-20,-24,-16,-14,-15,-13,38,65,38,65,38,38,38,-29,-30,-31,-32,-33,-34,-35,-36,65,-52,-26,38,38,38,-25,65,38,-42,-43,-44,-45,-46,-47,65,-50,-51,65,65,65,-12,38,65,38,-21,-22,-23,65,65,]),'EYE':([16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[43,43,43,43,-37,-38,-39,-40,-41,43,43,43,43,-48,-49,43,43,43,43,43,-29,-30,-31,-32,-33,-34,-35,-36,43,43,43,43,-42,-43,-44,-45,-46,-47,43,43,]),'ZEROS':([16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[44,44,44,44,-37,-38,-39,-40,-41,44,44,44,44,-48,-49,44,44,44,44,44,-29,-30,-31,-32,-33,-34,-35,-36,44,44,44,44,-42,-43,-44,-45,-46,-47,44,44,]),'ONES':([16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[45,45,45,45,-37,-38,-39,-40,-41,45,45,45,45,-48,-49,45,45,45,45,45,-29,-30,-31,-32,-33,-34,-35,-36,45,45,45,45,-42,-43,-44,-45,-46,-47,45,45,]),'INTNUM':([16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[48,48,48,48,-37,-38,-39,-40,-41,48,48,48,48,-48,-49,48,48,48,48,48,-29,-30,-31,-32,-33,-34,-35,-36,48,48,48,48,-42,-43,-44,-45,-46,-47,48,48,]),'FLOATNUM':([16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[49,49,49,49,-37,-38,-39,-40,-41,49,49,49,49,-48,-49,49,49,49,49,49,-29,-30,-31,-32,-33,-34,-35,-36,49,49,49,49,-42,-43,-44,-45,-46,-47,49,49,]),'STRING':([16,17,22,23,24,25,26,27,28,29,30,34,35,37,38,51,56,60,62,63,64,65,66,67,68,69,70,71,75,76,77,86,87,88,89,90,91,92,102,107,],[50,50,50,50,-37,-38,-39,-40,-41,50,50,50,50,-48,-49,50,50,50,50,50,-29,-30,-31,-32,-33,-34,-35,-36,50,50,50,50,-42,-43,-44,-45,-46,-47,50,50,]),']':([33,36,39,40,41,42,46,47,48,49,50,55,73,74,78,79,95,96,97,101,108,109,110,],[-27,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,82,-52,-26,-25,101,-28,-50,-51,-12,-21,-22,-23,]),',':([33,36,39,40,41,42,46,47,48,49,50,73,74,78,96,97,101,108,109,110,],[62,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-52,-26,-25,-50,-51,-12,-21,-22,-23,]),'*':([33,36,39,40,41,42,46,47,48,49,50,54,58,72,73,74,78,84,94,96,97,98,99,100,101,105,108,109,110,111,113,],[66,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,66,66,66,-52,-26,-25,66,66,-50,-51,66,66,66,-12,66,-21,-22,-23,66,66,]),'/':([33,36,39,40,41,42,46,47,48,49,50,54,58,72,73,74,78,84,94,96,97,98,99,100,101,105,108,109,110,111,113,],[67,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,67,67,67,-52,-26,-25,67,67,-50,-51,67,67,67,-12,67,-21,-22,-23,67,67,]),'DOTADD':([33,36,39,40,41,42,46,47,48,49,50,54,58,72,73,74,78,84,94,96,97,98,99,100,101,105,108,109,110,111,113,],[68,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,68,68,68,-52,-26,-25,68,68,-50,-51,68,68,68,-12,68,-21,-22,-23,68,68,]),'DOTSUB':([33,36,39,40,41,42,46,47,48,49,50,54,58,72,73,74,78,84,94,96,97,98,99,100,101,105,108,109,110,111,113,],[69,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,69,69,69,-52,-26,-25,69,69,-50,-51,69,69,69,-12,69,-21,-22,-23,69,69,]),'DOTMUL':([33,36,39,40,41,42,46,47,48,49,50,54,58,72,73,74,78,84,94,96,97,98,99,100,101,105,108,109,110,111,113,],[70,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,70,70,70,-52,-26,-25,70,70,-50,-51,70,70,70,-12,70,-21,-22,-23,70,70,]),'DOTDIV':([33,36,39,40,41,42,46,47,48,49,50,54,58,72,73,74,78,84,94,96,97,98,99,100,101,105,108,109,110,111,113,],[71,-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,71,71,71,-52,-26,-25,71,71,-50,-51,71,71,71,-12,71,-21,-22,-23,71,71,]),'GT':([36,39,40,41,42,46,47,48,49,50,58,73,74,78,84,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,87,-52,-26,-25,87,-50,-51,-12,-21,-22,-23,]),'LT':([36,39,40,41,42,46,47,48,49,50,58,73,74,78,84,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,88,-52,-26,-25,88,-50,-51,-12,-21,-22,-23,]),'LE':([36,39,40,41,42,46,47,48,49,50,58,73,74,78,84,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,89,-52,-26,-25,89,-50,-51,-12,-21,-22,-23,]),'GE':([36,39,40,41,42,46,47,48,49,50,58,73,74,78,84,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,90,-52,-26,-25,90,-50,-51,-12,-21,-22,-23,]),'NE':([36,39,40,41,42,46,47,48,49,50,58,73,74,78,84,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,91,-52,-26,-25,91,-50,-51,-12,-21,-22,-23,]),'EQ':([36,39,40,41,42,46,47,48,49,50,58,73,74,78,84,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,92,-52,-26,-25,92,-50,-51,-12,-21,-22,-23,]),')':([36,39,40,41,42,46,47,48,49,50,57,59,72,73,74,78,83,84,96,97,98,99,100,101,103,105,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,85,93,97,-52,-26,-25,103,97,-50,-51,108,109,110,-12,-55,-54,-21,-22,-23,]),':':([36,39,40,41,42,46,47,48,49,50,73,74,78,94,96,97,101,108,109,110,],[-53,-17,-18,-19,-20,-24,-16,-14,-15,-13,-52,-26,-25,107,-50,-51,-12,-21,-22,-23,]),"'":([36,39,40,41,42,46,47,48,49,50,74,78,101,108,109,110,],[74,-17,-18,-19,-20,-24,-16,-14,-15,-13,-26,-25,-12,-21,-22,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'START':([0,3,],[1,19,]),'INSTRUCTION':([0,1,3,19,85,93,112,113,],[2,18,2,18,104,106,115,116,]),'ASSIGN_EXP':([0,1,3,19,85,93,112,113,],[4,4,4,4,4,4,4,4,]),'IF_INSTRUCTION':([0,1,3,19,85,93,112,113,],[5,5,5,5,5,5,5,5,]),'WHILE_INSTRUCTION':([0,1,3,19,85,93,112,113,],[6,6,6,6,6,6,6,6,]),'FOR_INSTRUCTION':([0,1,3,19,85,93,112,113,],[7,7,7,7,7,7,7,7,]),'PRINT_FUN':([0,1,3,19,85,93,112,113,],[8,8,8,8,8,8,8,8,]),'RETURN_FUN':([0,1,3,19,85,93,112,113,],[9,9,9,9,9,9,9,9,]),'ASSIGN_OP':([12,82,],[22,102,]),'LIST_VALUE':([16,17,23,51,62,],[32,52,55,79,95,]),'ARITHMETIC_EXP':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[33,33,54,33,58,58,72,73,33,84,94,33,96,98,99,100,105,111,113,]),'ARITHMETIC_OP_UNARY':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'VALUE':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'INT_GR':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'FLOAT_GR':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ID_GR':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'STRING_GR':([16,17,22,23,29,30,34,35,51,56,60,62,63,75,76,77,86,102,107,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'VECTOR':([16,17,22,23,29,30,34,35,47,51,56,60,62,63,75,76,77,86,102,107,],[46,46,46,46,46,46,46,46,78,46,46,46,46,46,46,46,46,46,46,46,]),'RELATION_EXP':([29,30,56,],[57,59,83,]),'ARITHMETIC_OP':([33,54,58,72,73,84,94,96,98,99,100,105,111,113,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'RELATION_OP':([58,84,],[86,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> START","S'",1,None,None,None),
  ('START -> START INSTRUCTION','START',2,'p_start','Mparser.py',34),
  ('START -> INSTRUCTION','START',1,'p_start','Mparser.py',35),
  ('INSTRUCTION -> { START }','INSTRUCTION',3,'p_instruction','Mparser.py',44),
  ('INSTRUCTION -> ASSIGN_EXP','INSTRUCTION',1,'p_instruction','Mparser.py',45),
  ('INSTRUCTION -> IF_INSTRUCTION','INSTRUCTION',1,'p_instruction','Mparser.py',46),
  ('INSTRUCTION -> WHILE_INSTRUCTION','INSTRUCTION',1,'p_instruction','Mparser.py',47),
  ('INSTRUCTION -> FOR_INSTRUCTION','INSTRUCTION',1,'p_instruction','Mparser.py',48),
  ('INSTRUCTION -> PRINT_FUN','INSTRUCTION',1,'p_instruction','Mparser.py',49),
  ('INSTRUCTION -> RETURN_FUN','INSTRUCTION',1,'p_instruction','Mparser.py',50),
  ('INSTRUCTION -> BREAK ;','INSTRUCTION',2,'p_instruction','Mparser.py',51),
  ('INSTRUCTION -> CONTINUE ;','INSTRUCTION',2,'p_instruction','Mparser.py',52),
  ('VECTOR -> [ LIST_VALUE ]','VECTOR',3,'p_basic_vector','Mparser.py',63),
  ('STRING_GR -> STRING','STRING_GR',1,'p_basic_string','Mparser.py',67),
  ('INT_GR -> INTNUM','INT_GR',1,'p_basic_int','Mparser.py',70),
  ('FLOAT_GR -> FLOATNUM','FLOAT_GR',1,'p_basic_float','Mparser.py',73),
  ('ID_GR -> ID','ID_GR',1,'p_basic_id','Mparser.py',76),
  ('VALUE -> INT_GR','VALUE',1,'p_basic_value','Mparser.py',80),
  ('VALUE -> FLOAT_GR','VALUE',1,'p_basic_value','Mparser.py',81),
  ('VALUE -> ID_GR','VALUE',1,'p_basic_value','Mparser.py',82),
  ('VALUE -> STRING_GR','VALUE',1,'p_basic_value','Mparser.py',83),
  ('VALUE -> EYE ( ARITHMETIC_EXP )','VALUE',4,'p_basic_value','Mparser.py',84),
  ('VALUE -> ZEROS ( ARITHMETIC_EXP )','VALUE',4,'p_basic_value','Mparser.py',85),
  ('VALUE -> ONES ( ARITHMETIC_EXP )','VALUE',4,'p_basic_value','Mparser.py',86),
  ('VALUE -> VECTOR','VALUE',1,'p_basic_value','Mparser.py',87),
  ('VALUE -> ID VECTOR','VALUE',2,'p_basic_value','Mparser.py',88),
  ("VALUE -> VALUE '",'VALUE',2,'p_basic_value','Mparser.py',89),
  ('LIST_VALUE -> ARITHMETIC_EXP','LIST_VALUE',1,'p_basic_list_values','Mparser.py',106),
  ('LIST_VALUE -> ARITHMETIC_EXP , LIST_VALUE','LIST_VALUE',3,'p_basic_list_values','Mparser.py',107),
  ('ARITHMETIC_OP -> +','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',116),
  ('ARITHMETIC_OP -> -','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',117),
  ('ARITHMETIC_OP -> *','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',118),
  ('ARITHMETIC_OP -> /','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',119),
  ('ARITHMETIC_OP -> DOTADD','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',120),
  ('ARITHMETIC_OP -> DOTSUB','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',121),
  ('ARITHMETIC_OP -> DOTMUL','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',122),
  ('ARITHMETIC_OP -> DOTDIV','ARITHMETIC_OP',1,'p_basic_arithmetic_op','Mparser.py',123),
  ('ASSIGN_OP -> ADDASSIGN','ASSIGN_OP',1,'p_basic_assign_op','Mparser.py',127),
  ('ASSIGN_OP -> SUBASSIGN','ASSIGN_OP',1,'p_basic_assign_op','Mparser.py',128),
  ('ASSIGN_OP -> MULASSIGN','ASSIGN_OP',1,'p_basic_assign_op','Mparser.py',129),
  ('ASSIGN_OP -> DIVASSIGN','ASSIGN_OP',1,'p_basic_assign_op','Mparser.py',130),
  ('ASSIGN_OP -> =','ASSIGN_OP',1,'p_basic_assign_op','Mparser.py',131),
  ('RELATION_OP -> GT','RELATION_OP',1,'p_basic_relation_op','Mparser.py',135),
  ('RELATION_OP -> LT','RELATION_OP',1,'p_basic_relation_op','Mparser.py',136),
  ('RELATION_OP -> LE','RELATION_OP',1,'p_basic_relation_op','Mparser.py',137),
  ('RELATION_OP -> GE','RELATION_OP',1,'p_basic_relation_op','Mparser.py',138),
  ('RELATION_OP -> NE','RELATION_OP',1,'p_basic_relation_op','Mparser.py',139),
  ('RELATION_OP -> EQ','RELATION_OP',1,'p_basic_relation_op','Mparser.py',140),
  ('ARITHMETIC_OP_UNARY -> +','ARITHMETIC_OP_UNARY',1,'p_basic_arithmetic_op_unar','Mparser.py',144),
  ('ARITHMETIC_OP_UNARY -> -','ARITHMETIC_OP_UNARY',1,'p_basic_arithmetic_op_unar','Mparser.py',145),
  ('ARITHMETIC_EXP -> ARITHMETIC_EXP ARITHMETIC_OP ARITHMETIC_EXP','ARITHMETIC_EXP',3,'p_exp_arithmetic','Mparser.py',149),
  ('ARITHMETIC_EXP -> ( ARITHMETIC_EXP )','ARITHMETIC_EXP',3,'p_exp_arithmetic','Mparser.py',150),
  ('ARITHMETIC_EXP -> ARITHMETIC_OP_UNARY ARITHMETIC_EXP','ARITHMETIC_EXP',2,'p_exp_arithmetic','Mparser.py',151),
  ('ARITHMETIC_EXP -> VALUE','ARITHMETIC_EXP',1,'p_exp_arithmetic','Mparser.py',152),
  ('RELATION_EXP -> ARITHMETIC_EXP RELATION_OP ARITHMETIC_EXP','RELATION_EXP',3,'p_exp_relation','Mparser.py',163),
  ('RELATION_EXP -> ( RELATION_EXP )','RELATION_EXP',3,'p_exp_relation','Mparser.py',164),
  ('ASSIGN_EXP -> ID ASSIGN_OP ARITHMETIC_EXP ;','ASSIGN_EXP',4,'p_exp_assign','Mparser.py',171),
  ('ASSIGN_EXP -> ID [ LIST_VALUE ] ASSIGN_OP ARITHMETIC_EXP ;','ASSIGN_EXP',7,'p_exp_assign','Mparser.py',172),
  ('IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION','IF_INSTRUCTION',5,'p_instruction_if','Mparser.py',179),
  ('IF_INSTRUCTION -> IF ( RELATION_EXP ) INSTRUCTION ELSE INSTRUCTION','IF_INSTRUCTION',7,'p_instruction_if','Mparser.py',180),
  ('WHILE_INSTRUCTION -> WHILE ( RELATION_EXP ) INSTRUCTION','WHILE_INSTRUCTION',5,'p_instruction_while','Mparser.py',187),
  ('FOR_INSTRUCTION -> FOR ID = ARITHMETIC_EXP : ARITHMETIC_EXP INSTRUCTION','FOR_INSTRUCTION',7,'p_instruction_for','Mparser.py',191),
  ('PRINT_FUN -> PRINT LIST_VALUE ;','PRINT_FUN',3,'p_fun_print','Mparser.py',195),
  ('RETURN_FUN -> RETURN LIST_VALUE ;','RETURN_FUN',3,'p_fun_return','Mparser.py',198),
]
